{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4e00ffd4",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-04-23T20:24:07.419598Z",
     "iopub.status.busy": "2025-04-23T20:24:07.419179Z",
     "iopub.status.idle": "2025-04-23T20:24:11.984779Z",
     "shell.execute_reply": "2025-04-23T20:24:11.983766Z"
    },
    "papermill": {
     "duration": 4.577742,
     "end_time": "2025-04-23T20:24:11.986510",
     "exception": false,
     "start_time": "2025-04-23T20:24:07.408768",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd \n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.preprocessing import StandardScaler, PowerTransformer, RobustScaler\n",
    "from scipy.stats import skew\n",
    "from matplotlib.gridspec import GridSpec\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6c8f9dab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T20:24:12.002891Z",
     "iopub.status.busy": "2025-04-23T20:24:12.002394Z",
     "iopub.status.idle": "2025-04-23T20:24:12.181170Z",
     "shell.execute_reply": "2025-04-23T20:24:12.180180Z"
    },
    "papermill": {
     "duration": 0.188883,
     "end_time": "2025-04-23T20:24:12.183104",
     "exception": false,
     "start_time": "2025-04-23T20:24:11.994221",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# features = pd.read_csv(\"/kaggle/input/voice-features/features.csv\")\n",
    "# extra_features = pd.read_csv(\"/kaggle/input/voice-features/extracted_features_2k_3.csv\")\n",
    "# assert (features.columns == extra_features.columns).all() == True, 'mismatch in features'\n",
    "# extra_features_v2 = pd.read_csv(\"/kaggle/input/voice-features-2/extracted_features_3k_v2.csv\")\n",
    "# assert (extra_features_v2.columns == extra_features.columns).all() == True, 'mismatch in features'\n",
    "features = pd.read_csv(\"/kaggle/input/voice-features-3/extracted_features_3k_v3.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "50bc9bdd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T20:24:12.202623Z",
     "iopub.status.busy": "2025-04-23T20:24:12.202210Z",
     "iopub.status.idle": "2025-04-23T20:24:12.207471Z",
     "shell.execute_reply": "2025-04-23T20:24:12.206454Z"
    },
    "papermill": {
     "duration": 0.016891,
     "end_time": "2025-04-23T20:24:12.209222",
     "exception": false,
     "start_time": "2025-04-23T20:24:12.192331",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_data_again():\n",
    "    return pd.concat([features, extra_features, extra_features_v2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "848d60d3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T20:24:12.225580Z",
     "iopub.status.busy": "2025-04-23T20:24:12.225211Z",
     "iopub.status.idle": "2025-04-23T20:24:12.269078Z",
     "shell.execute_reply": "2025-04-23T20:24:12.267987Z"
    },
    "papermill": {
     "duration": 0.053735,
     "end_time": "2025-04-23T20:24:12.270772",
     "exception": false,
     "start_time": "2025-04-23T20:24:12.217037",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>duration</th>\n",
       "      <th>wps</th>\n",
       "      <th>f0_mean</th>\n",
       "      <th>f0_std</th>\n",
       "      <th>f0_5_percentile</th>\n",
       "      <th>f0_95_percentile</th>\n",
       "      <th>tempo</th>\n",
       "      <th>formant1</th>\n",
       "      <th>formant2</th>\n",
       "      <th>formant3</th>\n",
       "      <th>...</th>\n",
       "      <th>mfcc_11_skewness</th>\n",
       "      <th>mfcc_12_skewness</th>\n",
       "      <th>cpp_mean</th>\n",
       "      <th>ste_mean</th>\n",
       "      <th>ste_std</th>\n",
       "      <th>ste_max</th>\n",
       "      <th>ste_min</th>\n",
       "      <th>ste_variance</th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6.096</td>\n",
       "      <td>1.640420</td>\n",
       "      <td>119.198617</td>\n",
       "      <td>81.398030</td>\n",
       "      <td>88.505833</td>\n",
       "      <td>262.236074</td>\n",
       "      <td>4.593176</td>\n",
       "      <td>399.169587</td>\n",
       "      <td>2009.125846</td>\n",
       "      <td>2700.550802</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.783538</td>\n",
       "      <td>0.461395</td>\n",
       "      <td>0.061291</td>\n",
       "      <td>0.144445</td>\n",
       "      <td>0.051260</td>\n",
       "      <td>0.283757</td>\n",
       "      <td>0.070729</td>\n",
       "      <td>0.002628</td>\n",
       "      <td>male</td>\n",
       "      <td>twenties</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.904</td>\n",
       "      <td>1.721763</td>\n",
       "      <td>150.177861</td>\n",
       "      <td>24.237425</td>\n",
       "      <td>111.598084</td>\n",
       "      <td>187.274594</td>\n",
       "      <td>6.198347</td>\n",
       "      <td>391.966850</td>\n",
       "      <td>2066.013571</td>\n",
       "      <td>2714.614214</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.449396</td>\n",
       "      <td>-0.119143</td>\n",
       "      <td>0.105770</td>\n",
       "      <td>2.607156</td>\n",
       "      <td>3.712325</td>\n",
       "      <td>15.862205</td>\n",
       "      <td>0.064386</td>\n",
       "      <td>13.781358</td>\n",
       "      <td>male</td>\n",
       "      <td>twenties</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6.552</td>\n",
       "      <td>1.984127</td>\n",
       "      <td>278.521920</td>\n",
       "      <td>91.754404</td>\n",
       "      <td>184.647842</td>\n",
       "      <td>465.800200</td>\n",
       "      <td>4.731380</td>\n",
       "      <td>437.951707</td>\n",
       "      <td>2050.700732</td>\n",
       "      <td>2826.455089</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.289107</td>\n",
       "      <td>-0.374785</td>\n",
       "      <td>0.146734</td>\n",
       "      <td>9.556051</td>\n",
       "      <td>13.091264</td>\n",
       "      <td>90.015609</td>\n",
       "      <td>0.071602</td>\n",
       "      <td>171.381204</td>\n",
       "      <td>female</td>\n",
       "      <td>twenties</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6.192</td>\n",
       "      <td>1.776486</td>\n",
       "      <td>154.580259</td>\n",
       "      <td>136.825361</td>\n",
       "      <td>87.607927</td>\n",
       "      <td>497.179318</td>\n",
       "      <td>5.167959</td>\n",
       "      <td>455.335647</td>\n",
       "      <td>1162.699666</td>\n",
       "      <td>3262.374453</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.516157</td>\n",
       "      <td>-0.758677</td>\n",
       "      <td>0.073733</td>\n",
       "      <td>0.209816</td>\n",
       "      <td>0.126767</td>\n",
       "      <td>0.713192</td>\n",
       "      <td>0.057320</td>\n",
       "      <td>0.016070</td>\n",
       "      <td>male</td>\n",
       "      <td>twenties</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.544</td>\n",
       "      <td>2.358491</td>\n",
       "      <td>122.478758</td>\n",
       "      <td>86.392883</td>\n",
       "      <td>86.780747</td>\n",
       "      <td>121.669481</td>\n",
       "      <td>8.647799</td>\n",
       "      <td>1037.513502</td>\n",
       "      <td>2785.112321</td>\n",
       "      <td>3478.505569</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.614169</td>\n",
       "      <td>0.297639</td>\n",
       "      <td>0.067405</td>\n",
       "      <td>0.389164</td>\n",
       "      <td>0.267288</td>\n",
       "      <td>1.072733</td>\n",
       "      <td>0.047236</td>\n",
       "      <td>0.071443</td>\n",
       "      <td>male</td>\n",
       "      <td>fifties</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 122 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   duration       wps     f0_mean      f0_std  f0_5_percentile  \\\n",
       "0     6.096  1.640420  119.198617   81.398030        88.505833   \n",
       "1     2.904  1.721763  150.177861   24.237425       111.598084   \n",
       "2     6.552  1.984127  278.521920   91.754404       184.647842   \n",
       "3     6.192  1.776486  154.580259  136.825361        87.607927   \n",
       "4     2.544  2.358491  122.478758   86.392883        86.780747   \n",
       "\n",
       "   f0_95_percentile     tempo     formant1     formant2     formant3  ...  \\\n",
       "0        262.236074  4.593176   399.169587  2009.125846  2700.550802  ...   \n",
       "1        187.274594  6.198347   391.966850  2066.013571  2714.614214  ...   \n",
       "2        465.800200  4.731380   437.951707  2050.700732  2826.455089  ...   \n",
       "3        497.179318  5.167959   455.335647  1162.699666  3262.374453  ...   \n",
       "4        121.669481  8.647799  1037.513502  2785.112321  3478.505569  ...   \n",
       "\n",
       "   mfcc_11_skewness  mfcc_12_skewness  cpp_mean  ste_mean    ste_std  \\\n",
       "0         -0.783538          0.461395  0.061291  0.144445   0.051260   \n",
       "1         -0.449396         -0.119143  0.105770  2.607156   3.712325   \n",
       "2         -0.289107         -0.374785  0.146734  9.556051  13.091264   \n",
       "3         -0.516157         -0.758677  0.073733  0.209816   0.126767   \n",
       "4         -0.614169          0.297639  0.067405  0.389164   0.267288   \n",
       "\n",
       "     ste_max   ste_min  ste_variance  gender       age  \n",
       "0   0.283757  0.070729      0.002628    male  twenties  \n",
       "1  15.862205  0.064386     13.781358    male  twenties  \n",
       "2  90.015609  0.071602    171.381204  female  twenties  \n",
       "3   0.713192  0.057320      0.016070    male  twenties  \n",
       "4   1.072733  0.047236      0.071443    male   fifties  \n",
       "\n",
       "[5 rows x 122 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#df = get_data_again()\n",
    "df = features.copy()\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "720a5665",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T20:24:12.286509Z",
     "iopub.status.busy": "2025-04-23T20:24:12.286096Z",
     "iopub.status.idle": "2025-04-23T20:24:12.486648Z",
     "shell.execute_reply": "2025-04-23T20:24:12.485633Z"
    },
    "papermill": {
     "duration": 0.210458,
     "end_time": "2025-04-23T20:24:12.488515",
     "exception": false,
     "start_time": "2025-04-23T20:24:12.278057",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>duration</th>\n",
       "      <th>wps</th>\n",
       "      <th>f0_mean</th>\n",
       "      <th>f0_std</th>\n",
       "      <th>f0_5_percentile</th>\n",
       "      <th>f0_95_percentile</th>\n",
       "      <th>tempo</th>\n",
       "      <th>formant1</th>\n",
       "      <th>formant2</th>\n",
       "      <th>formant3</th>\n",
       "      <th>...</th>\n",
       "      <th>mfcc_9_skewness</th>\n",
       "      <th>mfcc_10_skewness</th>\n",
       "      <th>mfcc_11_skewness</th>\n",
       "      <th>mfcc_12_skewness</th>\n",
       "      <th>cpp_mean</th>\n",
       "      <th>ste_mean</th>\n",
       "      <th>ste_std</th>\n",
       "      <th>ste_max</th>\n",
       "      <th>ste_min</th>\n",
       "      <th>ste_variance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2986.000000</td>\n",
       "      <td>2986.000000</td>\n",
       "      <td>2986.000000</td>\n",
       "      <td>2986.000000</td>\n",
       "      <td>2986.000000</td>\n",
       "      <td>2986.000000</td>\n",
       "      <td>2986.000000</td>\n",
       "      <td>2986.000000</td>\n",
       "      <td>2986.000000</td>\n",
       "      <td>2986.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>2986.000000</td>\n",
       "      <td>2986.000000</td>\n",
       "      <td>2986.000000</td>\n",
       "      <td>2986.000000</td>\n",
       "      <td>2986.000000</td>\n",
       "      <td>2986.000000</td>\n",
       "      <td>2986.000000</td>\n",
       "      <td>2986.000000</td>\n",
       "      <td>2986.000000</td>\n",
       "      <td>2986.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>4.764539</td>\n",
       "      <td>1.982939</td>\n",
       "      <td>155.798793</td>\n",
       "      <td>54.129725</td>\n",
       "      <td>109.829588</td>\n",
       "      <td>250.090084</td>\n",
       "      <td>5.063695</td>\n",
       "      <td>687.473252</td>\n",
       "      <td>1824.737776</td>\n",
       "      <td>2882.334321</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.460145</td>\n",
       "      <td>-0.292031</td>\n",
       "      <td>-0.325368</td>\n",
       "      <td>-0.229565</td>\n",
       "      <td>0.087399</td>\n",
       "      <td>6.218658</td>\n",
       "      <td>7.376015</td>\n",
       "      <td>37.580599</td>\n",
       "      <td>0.071834</td>\n",
       "      <td>113.317610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.690977</td>\n",
       "      <td>0.521274</td>\n",
       "      <td>45.027865</td>\n",
       "      <td>38.391606</td>\n",
       "      <td>29.034486</td>\n",
       "      <td>127.991534</td>\n",
       "      <td>1.297101</td>\n",
       "      <td>450.933102</td>\n",
       "      <td>553.081372</td>\n",
       "      <td>547.803836</td>\n",
       "      <td>...</td>\n",
       "      <td>0.473575</td>\n",
       "      <td>0.529952</td>\n",
       "      <td>0.473767</td>\n",
       "      <td>0.519697</td>\n",
       "      <td>0.026600</td>\n",
       "      <td>6.737690</td>\n",
       "      <td>7.676702</td>\n",
       "      <td>36.746951</td>\n",
       "      <td>0.098614</td>\n",
       "      <td>354.447468</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2.016000</td>\n",
       "      <td>0.295508</td>\n",
       "      <td>84.837773</td>\n",
       "      <td>4.821970</td>\n",
       "      <td>75.092280</td>\n",
       "      <td>95.420288</td>\n",
       "      <td>0.661376</td>\n",
       "      <td>54.555249</td>\n",
       "      <td>429.916205</td>\n",
       "      <td>1154.084645</td>\n",
       "      <td>...</td>\n",
       "      <td>-3.233681</td>\n",
       "      <td>-3.009840</td>\n",
       "      <td>-2.578915</td>\n",
       "      <td>-2.498534</td>\n",
       "      <td>-0.005469</td>\n",
       "      <td>0.068594</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.068594</td>\n",
       "      <td>0.033204</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>3.414000</td>\n",
       "      <td>1.623377</td>\n",
       "      <td>124.124394</td>\n",
       "      <td>23.036081</td>\n",
       "      <td>90.188776</td>\n",
       "      <td>156.920100</td>\n",
       "      <td>4.192872</td>\n",
       "      <td>382.262231</td>\n",
       "      <td>1442.395152</td>\n",
       "      <td>2521.692321</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.746431</td>\n",
       "      <td>-0.642823</td>\n",
       "      <td>-0.609053</td>\n",
       "      <td>-0.572970</td>\n",
       "      <td>0.069924</td>\n",
       "      <td>1.579781</td>\n",
       "      <td>1.835594</td>\n",
       "      <td>9.580933</td>\n",
       "      <td>0.060082</td>\n",
       "      <td>3.369406</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>4.584000</td>\n",
       "      <td>1.931035</td>\n",
       "      <td>142.323424</td>\n",
       "      <td>46.489698</td>\n",
       "      <td>101.732918</td>\n",
       "      <td>195.695249</td>\n",
       "      <td>5.050505</td>\n",
       "      <td>526.258025</td>\n",
       "      <td>1783.049436</td>\n",
       "      <td>2810.607968</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.483232</td>\n",
       "      <td>-0.330373</td>\n",
       "      <td>-0.337647</td>\n",
       "      <td>-0.266960</td>\n",
       "      <td>0.085412</td>\n",
       "      <td>4.758000</td>\n",
       "      <td>5.768675</td>\n",
       "      <td>29.617907</td>\n",
       "      <td>0.065640</td>\n",
       "      <td>33.277621</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>5.874000</td>\n",
       "      <td>2.300173</td>\n",
       "      <td>176.414264</td>\n",
       "      <td>74.006342</td>\n",
       "      <td>120.196176</td>\n",
       "      <td>307.908498</td>\n",
       "      <td>5.925076</td>\n",
       "      <td>840.579026</td>\n",
       "      <td>2174.695455</td>\n",
       "      <td>3209.708546</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.200758</td>\n",
       "      <td>0.021282</td>\n",
       "      <td>-0.049658</td>\n",
       "      <td>0.094934</td>\n",
       "      <td>0.101320</td>\n",
       "      <td>8.480648</td>\n",
       "      <td>10.348893</td>\n",
       "      <td>53.592651</td>\n",
       "      <td>0.073505</td>\n",
       "      <td>107.099590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>12.480000</td>\n",
       "      <td>4.166667</td>\n",
       "      <td>400.126997</td>\n",
       "      <td>219.438689</td>\n",
       "      <td>268.434277</td>\n",
       "      <td>598.701914</td>\n",
       "      <td>12.066365</td>\n",
       "      <td>3242.755264</td>\n",
       "      <td>4318.249588</td>\n",
       "      <td>4903.220931</td>\n",
       "      <td>...</td>\n",
       "      <td>1.869237</td>\n",
       "      <td>1.963303</td>\n",
       "      <td>2.106524</td>\n",
       "      <td>2.250453</td>\n",
       "      <td>0.433487</td>\n",
       "      <td>96.462553</td>\n",
       "      <td>93.370076</td>\n",
       "      <td>403.240584</td>\n",
       "      <td>5.313799</td>\n",
       "      <td>8717.971034</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows Ã— 120 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          duration          wps      f0_mean       f0_std  f0_5_percentile  \\\n",
       "count  2986.000000  2986.000000  2986.000000  2986.000000      2986.000000   \n",
       "mean      4.764539     1.982939   155.798793    54.129725       109.829588   \n",
       "std       1.690977     0.521274    45.027865    38.391606        29.034486   \n",
       "min       2.016000     0.295508    84.837773     4.821970        75.092280   \n",
       "25%       3.414000     1.623377   124.124394    23.036081        90.188776   \n",
       "50%       4.584000     1.931035   142.323424    46.489698       101.732918   \n",
       "75%       5.874000     2.300173   176.414264    74.006342       120.196176   \n",
       "max      12.480000     4.166667   400.126997   219.438689       268.434277   \n",
       "\n",
       "       f0_95_percentile        tempo     formant1     formant2     formant3  \\\n",
       "count       2986.000000  2986.000000  2986.000000  2986.000000  2986.000000   \n",
       "mean         250.090084     5.063695   687.473252  1824.737776  2882.334321   \n",
       "std          127.991534     1.297101   450.933102   553.081372   547.803836   \n",
       "min           95.420288     0.661376    54.555249   429.916205  1154.084645   \n",
       "25%          156.920100     4.192872   382.262231  1442.395152  2521.692321   \n",
       "50%          195.695249     5.050505   526.258025  1783.049436  2810.607968   \n",
       "75%          307.908498     5.925076   840.579026  2174.695455  3209.708546   \n",
       "max          598.701914    12.066365  3242.755264  4318.249588  4903.220931   \n",
       "\n",
       "       ...  mfcc_9_skewness  mfcc_10_skewness  mfcc_11_skewness  \\\n",
       "count  ...      2986.000000       2986.000000       2986.000000   \n",
       "mean   ...        -0.460145         -0.292031         -0.325368   \n",
       "std    ...         0.473575          0.529952          0.473767   \n",
       "min    ...        -3.233681         -3.009840         -2.578915   \n",
       "25%    ...        -0.746431         -0.642823         -0.609053   \n",
       "50%    ...        -0.483232         -0.330373         -0.337647   \n",
       "75%    ...        -0.200758          0.021282         -0.049658   \n",
       "max    ...         1.869237          1.963303          2.106524   \n",
       "\n",
       "       mfcc_12_skewness     cpp_mean     ste_mean      ste_std      ste_max  \\\n",
       "count       2986.000000  2986.000000  2986.000000  2986.000000  2986.000000   \n",
       "mean          -0.229565     0.087399     6.218658     7.376015    37.580599   \n",
       "std            0.519697     0.026600     6.737690     7.676702    36.746951   \n",
       "min           -2.498534    -0.005469     0.068594     0.000000     0.068594   \n",
       "25%           -0.572970     0.069924     1.579781     1.835594     9.580933   \n",
       "50%           -0.266960     0.085412     4.758000     5.768675    29.617907   \n",
       "75%            0.094934     0.101320     8.480648    10.348893    53.592651   \n",
       "max            2.250453     0.433487    96.462553    93.370076   403.240584   \n",
       "\n",
       "           ste_min  ste_variance  \n",
       "count  2986.000000   2986.000000  \n",
       "mean      0.071834    113.317610  \n",
       "std       0.098614    354.447468  \n",
       "min       0.033204      0.000000  \n",
       "25%       0.060082      3.369406  \n",
       "50%       0.065640     33.277621  \n",
       "75%       0.073505    107.099590  \n",
       "max       5.313799   8717.971034  \n",
       "\n",
       "[8 rows x 120 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e7fdb936",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T20:24:12.506396Z",
     "iopub.status.busy": "2025-04-23T20:24:12.505585Z",
     "iopub.status.idle": "2025-04-23T20:24:12.510375Z",
     "shell.execute_reply": "2025-04-23T20:24:12.509560Z"
    },
    "papermill": {
     "duration": 0.014928,
     "end_time": "2025-04-23T20:24:12.511974",
     "exception": false,
     "start_time": "2025-04-23T20:24:12.497046",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def check_nulls(df):\n",
    "    a = df.isna().sum()\n",
    "    for index, value in a.items():\n",
    "        if value > 0:\n",
    "            return False\n",
    "    return True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "03911f44",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T20:24:12.528841Z",
     "iopub.status.busy": "2025-04-23T20:24:12.528493Z",
     "iopub.status.idle": "2025-04-23T20:24:12.535093Z",
     "shell.execute_reply": "2025-04-23T20:24:12.534223Z"
    },
    "papermill": {
     "duration": 0.017001,
     "end_time": "2025-04-23T20:24:12.536839",
     "exception": false,
     "start_time": "2025-04-23T20:24:12.519838",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def smart_normalize(df, skew_threshold=0.5):\n",
    "\n",
    "    numeric_cols = df.select_dtypes(include=['number']).columns\n",
    "    df_normalized = df.copy()\n",
    "    transformations = {}\n",
    "    \n",
    "    # Step 1: Skewness correction\n",
    "    for col in numeric_cols:\n",
    "        col_skew = skew(df[col].dropna())\n",
    "        if abs(col_skew) > skew_threshold:\n",
    "            # Apply Yeo-Johnson power transform (handles positive/negative values)\n",
    "            pt = PowerTransformer(method='yeo-johnson')\n",
    "            df_normalized[col] = pt.fit_transform(df[[col]]).flatten()\n",
    "            transformations[col] = {\n",
    "                'step1': 'power_transform',\n",
    "                'skewness': col_skew,\n",
    "                'transformer': pt\n",
    "            }\n",
    "        else:\n",
    "            transformations[col] = {\n",
    "                'step1': 'none',\n",
    "                'skewness': col_skew\n",
    "            }\n",
    "    \n",
    "    # Step 2: Standard scaling (applied to all numeric columns)\n",
    "    scaler = StandardScaler()\n",
    "    df_normalized[numeric_cols] = scaler.fit_transform(df_normalized[numeric_cols])\n",
    "    transformations['_standard_scaler'] = scaler\n",
    "    \n",
    "    return df_normalized, transformations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "90a457cc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T20:24:12.553321Z",
     "iopub.status.busy": "2025-04-23T20:24:12.552980Z",
     "iopub.status.idle": "2025-04-23T20:24:12.559165Z",
     "shell.execute_reply": "2025-04-23T20:24:12.558031Z"
    },
    "papermill": {
     "duration": 0.016646,
     "end_time": "2025-04-23T20:24:12.560894",
     "exception": false,
     "start_time": "2025-04-23T20:24:12.544248",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def remove_outliers(df, outliers_cols, threshold_percent = 1):\n",
    "    numeric_cols = df.select_dtypes(include=['number']).columns\n",
    "    df_clean = df.copy()\n",
    "    \n",
    "    for i, (col, states) in enumerate(outliers_cols.items()):\n",
    "        if states['percent'] < threshold_percent:\n",
    "            lower_bound = states['lower_bound']\n",
    "            upper_bound = states['upper_bound']\n",
    "            \n",
    "            df_clean = df_clean[(df_clean[col] >= lower_bound) & (df_clean[col] <= upper_bound)]\n",
    "        \n",
    "    return df_clean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ac944e09",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T20:24:12.579053Z",
     "iopub.status.busy": "2025-04-23T20:24:12.578712Z",
     "iopub.status.idle": "2025-04-23T20:24:12.585770Z",
     "shell.execute_reply": "2025-04-23T20:24:12.584687Z"
    },
    "papermill": {
     "duration": 0.018824,
     "end_time": "2025-04-23T20:24:12.587600",
     "exception": false,
     "start_time": "2025-04-23T20:24:12.568776",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def find_high_outlier_columns(df):\n",
    "    outlier_columns = {}\n",
    "    \n",
    "    for col in df.select_dtypes(include=np.number).columns:\n",
    "        if col == 'age' or df[col].nunique() < 10:  \n",
    "            continue\n",
    "            \n",
    "        Q1 = df[col].quantile(0.1)\n",
    "        Q3 = df[col].quantile(0.9)\n",
    "        IQR = Q3 - Q1\n",
    "        \n",
    "        lower_bound = Q1 - 1.5 * IQR\n",
    "        upper_bound = Q3 + 1.5 * IQR\n",
    "        \n",
    "        outliers = df[(df[col] < lower_bound) | (df[col] > upper_bound)][col]\n",
    "        outlier_percent = (len(outliers) / len(df[col].dropna())) * 100\n",
    "        \n",
    "        outlier_columns[col] = {\n",
    "            'percent': outlier_percent,\n",
    "            'count': len(outliers),\n",
    "            'lower_bound': lower_bound,\n",
    "            'upper_bound': upper_bound\n",
    "        }\n",
    "            \n",
    "    return outlier_columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ec3f2686",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T20:24:12.604748Z",
     "iopub.status.busy": "2025-04-23T20:24:12.604356Z",
     "iopub.status.idle": "2025-04-23T20:24:12.613560Z",
     "shell.execute_reply": "2025-04-23T20:24:12.612753Z"
    },
    "papermill": {
     "duration": 0.01992,
     "end_time": "2025-04-23T20:24:12.615294",
     "exception": false,
     "start_time": "2025-04-23T20:24:12.595374",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def visualize_outliers(df, outlier_columns):\n",
    "    if not outlier_columns:\n",
    "        print(\"No columns with more than 5% outliers found.\")\n",
    "        return\n",
    "        \n",
    "    for i, (col, stats) in enumerate(outlier_columns.items()):\n",
    "        if stats['percent'] > 5:\n",
    "            plt.figure(figsize=(15, 8))\n",
    "            gs = GridSpec(2, 2, height_ratios=[3, 1])\n",
    "            \n",
    "            # Box plot\n",
    "            ax1 = plt.subplot(gs[0, 0])\n",
    "            sns.boxplot(x=df[col], ax=ax1)\n",
    "            ax1.set_title(f\"Box Plot: {col}\")\n",
    "            \n",
    "            # Histogram with KDE\n",
    "            ax2 = plt.subplot(gs[0, 1])\n",
    "            sns.histplot(df[col], kde=True, ax=ax2)\n",
    "            ax2.axvline(stats['lower_bound'], color='r', linestyle='--', label='Outlier Threshold')\n",
    "            ax2.axvline(stats['upper_bound'], color='r', linestyle='--')\n",
    "            ax2.legend()\n",
    "            ax2.set_title(f\"Distribution: {col}\")\n",
    "            \n",
    "            # Outlier detail table\n",
    "            ax3 = plt.subplot(gs[1, :])\n",
    "            ax3.axis('off')\n",
    "            outlier_text = (\n",
    "                f\"Column: {col}\\n\"\n",
    "                f\"Outliers: {stats['count']} values ({stats['percent']:.2f}% of non-null data)\\n\"\n",
    "                f\"Lower bound: {stats['lower_bound']:.2f}\\n\"\n",
    "                f\"Upper bound: {stats['upper_bound']:.2f}\\n\"\n",
    "                f\"Min: {df[col].min():.2f}, Max: {df[col].max():.2f}\\n\"\n",
    "                f\"Mean: {df[col].mean():.2f}, Median: {df[col].median():.2f}\"\n",
    "            )\n",
    "            ax3.text(0.5, 0.5, outlier_text, ha='center', va='center', fontsize=12)\n",
    "            \n",
    "            plt.tight_layout()\n",
    "            plt.show()\n",
    "            \n",
    "            # Print summary\n",
    "            print(f\"\\nðŸ“Š Outlier Analysis for {col}:\")\n",
    "            print(f\"  â€¢ {stats['percent']:.2f}% of values are outliers ({stats['count']} out of {len(df[col].dropna())})\")\n",
    "            print(f\"  â€¢ Outlier thresholds: < {stats['lower_bound']:.2f} or > {stats['upper_bound']:.2f}\")\n",
    "            print(\"â”€â”€\"*40)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2ec7d611",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T20:24:12.631990Z",
     "iopub.status.busy": "2025-04-23T20:24:12.631663Z",
     "iopub.status.idle": "2025-04-23T20:24:12.642814Z",
     "shell.execute_reply": "2025-04-23T20:24:12.641823Z"
    },
    "papermill": {
     "duration": 0.021791,
     "end_time": "2025-04-23T20:24:12.644593",
     "exception": false,
     "start_time": "2025-04-23T20:24:12.622802",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def view_outlier_dist(df, outlier_columns):\n",
    "    for i, (col, stats) in enumerate(outlier_columns.items()):\n",
    "        if stats['percent'] > 5:\n",
    "            df_clean = df.copy()\n",
    "            df = df_clean[(df_clean[col] >= stats['lower_bound']) & (df_clean[col] <= stats['upper_bound'])]\n",
    "            \n",
    "            male_df = df_clean[df_clean['gender'] == 'male']\n",
    "            female_df = df_clean[df_clean['gender'] == 'female']\n",
    "                \n",
    "            male_stats = {'mean': male_df[col].mean(), 'std': male_df[col].std()}\n",
    "            female_stats = {'mean': female_df[col].mean(), 'std': female_df[col].std()}\n",
    "            \n",
    "            male_snr = abs(male_stats['mean']) / male_stats['std'] if male_stats['std'] != 0 else 0\n",
    "            female_snr = abs(female_stats['mean']) / female_stats['std'] if female_stats['std'] != 0 else 0\n",
    "            \n",
    "            pooled_std = np.sqrt((male_stats['std']**2 + female_stats['std']**2)/2)\n",
    "            cohens_d = abs(male_stats['mean'] - female_stats['mean']) / pooled_std\n",
    "            print(cohens_d)\n",
    "            \n",
    "            plt.figure(figsize=(12, 6))\n",
    "            \n",
    "            # Distribution plot\n",
    "            sns.kdeplot(data=df_clean, x=col, hue='gender', fill=True, alpha=0.3, \n",
    "                       common_norm=False, palette={'male':'blue', 'female':'orange'}, hue_order=('male', 'female'))\n",
    "            \n",
    "            plt.axvline(male_stats['mean'], color='blue', linestyle='--', \n",
    "                        label=f\"Male: Î¼ = {male_stats['mean']:.2f}, Ïƒ = {male_stats['std']:.2f}\")\n",
    "            plt.axvline(female_stats['mean'], color='orange', linestyle='--',\n",
    "                        label=f\"Female: Î¼ = {female_stats['mean']:.2f}, Ïƒ = {female_stats['std']:.2f}\")\n",
    "            \n",
    "            plt.axvspan(male_stats['mean'] - male_stats['std'], male_stats['mean'] + male_stats['std'], \n",
    "                        color='blue', alpha=0.1)\n",
    "            plt.axvspan(female_stats['mean'] - female_stats['std'], female_stats['mean'] + female_stats['std'],\n",
    "                       color='orange', alpha=0.1)\n",
    "            \n",
    "            plt.title(f\"{col}\\nCohen's d = {cohens_d:.2f} (Male SNR: {male_snr:.2f}, Female SNR: {female_snr:.2f})\")\n",
    "            plt.legend()\n",
    "            plt.tight_layout()\n",
    "            plt.show()\n",
    "            \n",
    "            # Print comprehensive comparison\n",
    "            print(f\"\\nðŸ“Š {col}\")\n",
    "            print(f\"   Male: Î¼/Ïƒ = {male_snr:.2f} (Î¼ = {male_stats['mean']:.2f}, Ïƒ = {male_stats['std']:.2f})\")\n",
    "            print(f\" Female: Î¼/Ïƒ = {female_snr:.2f} (Î¼ = {female_stats['mean']:.2f}, Ïƒ = {female_stats['std']:.2f})\")\n",
    "            print(f\" Standardized difference (Cohen's d): {cohens_d:.2f}\")\n",
    "            print(\"â”€â”€\"*30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "20ea9220",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T20:24:12.660669Z",
     "iopub.status.busy": "2025-04-23T20:24:12.660228Z",
     "iopub.status.idle": "2025-04-23T20:24:12.671679Z",
     "shell.execute_reply": "2025-04-23T20:24:12.670714Z"
    },
    "papermill": {
     "duration": 0.021425,
     "end_time": "2025-04-23T20:24:12.673351",
     "exception": false,
     "start_time": "2025-04-23T20:24:12.651926",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def plot_male_female_diff(male_df, female_df):\n",
    "    for col in male_df.select_dtypes(include=np.number).columns:  # Only numeric columns\n",
    "        if col == 'gender':\n",
    "            continue\n",
    "            \n",
    "        male_stats = {'mean': male_df[col].mean(), 'std': male_df[col].std()}\n",
    "        female_stats = {'mean': female_df[col].mean(), 'std': female_df[col].std()}\n",
    "        \n",
    "        male_snr = abs(male_stats['mean']) / male_stats['std'] if male_stats['std'] != 0 else 0\n",
    "        female_snr = abs(female_stats['mean']) / female_stats['std'] if female_stats['std'] != 0 else 0\n",
    "        \n",
    "        pooled_std = np.sqrt((male_stats['std']**2 + female_stats['std']**2)/2)\n",
    "        cohens_d = abs(male_stats['mean'] - female_stats['mean']) / pooled_std\n",
    "        \n",
    "        if cohens_d > 0.4:\n",
    "            plt.figure(figsize=(12, 6))\n",
    "            \n",
    "            # Distribution plot\n",
    "            sns.kdeplot(data=df, x=col, hue='gender', fill=True, alpha=0.3, \n",
    "                       common_norm=False, palette={'male':'blue', 'female':'orange'}, hue_order=('male', 'female'))\n",
    "            \n",
    "            plt.axvline(male_stats['mean'], color='blue', linestyle='--', \n",
    "                        label=f\"Male: Î¼ = {male_stats['mean']:.2f}, Ïƒ = {male_stats['std']:.2f}\")\n",
    "            plt.axvline(female_stats['mean'], color='orange', linestyle='--',\n",
    "                        label=f\"Female: Î¼ = {female_stats['mean']:.2f}, Ïƒ = {female_stats['std']:.2f}\")\n",
    "            \n",
    "            plt.axvspan(male_stats['mean'] - male_stats['std'], male_stats['mean'] + male_stats['std'], \n",
    "                        color='blue', alpha=0.1)\n",
    "            plt.axvspan(female_stats['mean'] - female_stats['std'], female_stats['mean'] + female_stats['std'],\n",
    "                       color='orange', alpha=0.1)\n",
    "            \n",
    "            plt.title(f\"{col}\\nCohen's d = {cohens_d:.2f} (Male SNR: {male_snr:.2f}, Female SNR: {female_snr:.2f})\")\n",
    "            plt.legend()\n",
    "            plt.tight_layout()\n",
    "            plt.show()\n",
    "            \n",
    "            # Print comprehensive comparison\n",
    "            print(f\"\\nðŸ“Š {col}\")\n",
    "            print(f\"   Male: Î¼/Ïƒ = {male_snr:.2f} (Î¼ = {male_stats['mean']:.2f}, Ïƒ = {male_stats['std']:.2f})\")\n",
    "            print(f\" Female: Î¼/Ïƒ = {female_snr:.2f} (Î¼ = {female_stats['mean']:.2f}, Ïƒ = {female_stats['std']:.2f})\")\n",
    "            print(f\" Standardized difference (Cohen's d): {cohens_d:.2f}\")\n",
    "            print(\"â”€â”€\"*30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "2e64cf59",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T20:24:12.690762Z",
     "iopub.status.busy": "2025-04-23T20:24:12.689849Z",
     "iopub.status.idle": "2025-04-23T20:24:12.701359Z",
     "shell.execute_reply": "2025-04-23T20:24:12.700353Z"
    },
    "papermill": {
     "duration": 0.021688,
     "end_time": "2025-04-23T20:24:12.702999",
     "exception": false,
     "start_time": "2025-04-23T20:24:12.681311",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def plot_twenties_vs_fifties(twenties_df, fifties_df):\n",
    "    for col in twenties_df.select_dtypes(include=np.number).columns:  \n",
    "        if col == 'age':  \n",
    "            continue\n",
    "            \n",
    "        # Calculate statistics\n",
    "        twenties_stats = {'mean': twenties_df[col].mean(), 'std': twenties_df[col].std()}\n",
    "        fifties_stats = {'mean': fifties_df[col].mean(), 'std': fifties_df[col].std()}\n",
    "        \n",
    "        # Calculate signal-to-noise ratio (mean/std)\n",
    "        twenties_snr = abs(twenties_stats['mean']) / twenties_stats['std'] if twenties_stats['std'] != 0 else 0\n",
    "        fifties_snr = abs(fifties_stats['mean']) / fifties_stats['std'] if fifties_stats['std'] != 0 else 0\n",
    "        \n",
    "        # Calculate standardized mean difference (Cohen's d)\n",
    "        pooled_std = np.sqrt((twenties_stats['std']**2 + fifties_stats['std']**2)/2)\n",
    "        cohens_d = abs(twenties_stats['mean'] - fifties_stats['mean']) / pooled_std\n",
    "        \n",
    "        # Only plot if substantial difference exists (Cohen's d > 0.4 effect)\n",
    "        if cohens_d > 0.2:\n",
    "            plt.figure(figsize=(12, 6))\n",
    "            \n",
    "            # Create temp dataframe with age groups for plotting\n",
    "            plot_df = pd.concat([\n",
    "                twenties_df[col].to_frame().assign(age_group='20-29'),\n",
    "                fifties_df[col].to_frame().assign(age_group='50-59')\n",
    "            ])\n",
    "            \n",
    "            # Distribution plot\n",
    "            sns.kdeplot(data=plot_df, x=col, hue='age_group', fill=True, alpha=0.3, \n",
    "                       common_norm=False, palette={'20-29':'blue', '50-59':'orange'})\n",
    "            \n",
    "            # Add statistics annotations\n",
    "            plt.axvline(twenties_stats['mean'], color='blue', linestyle='--', \n",
    "                        label=f\"twenties: Î¼ = {twenties_stats['mean']:.2f}, Ïƒ = {twenties_stats['std']:.2f}\")\n",
    "            plt.axvline(fifties_stats['mean'], color='orange', linestyle='--',\n",
    "                        label=f\"fifties: Î¼ = {fifties_stats['mean']:.2f}, Ïƒ = {fifties_stats['std']:.2f}\")\n",
    "            \n",
    "            # Add std ranges\n",
    "            plt.axvspan(twenties_stats['mean'] - twenties_stats['std'], twenties_stats['mean'] + twenties_stats['std'], \n",
    "                        color='blue', alpha=0.1)\n",
    "            plt.axvspan(fifties_stats['mean'] - fifties_stats['std'], fifties_stats['mean'] + fifties_stats['std'],\n",
    "                       color='orange', alpha=0.1)\n",
    "            \n",
    "            plt.title(f\"{col}\\nCohen's d = {cohens_d:.2f} (twenties SNR: {twenties_snr:.2f}, fifties SNR: {fifties_snr:.2f})\")\n",
    "            plt.legend()\n",
    "            plt.tight_layout()\n",
    "            plt.show()\n",
    "            \n",
    "            # Print comprehensive comparison\n",
    "            print(f\"\\nðŸ“Š {col}\")\n",
    "            print(f\"   twenties: Î¼/Ïƒ = {twenties_snr:.2f} (Î¼ = {twenties_stats['mean']:.2f}, Ïƒ = {twenties_stats['std']:.2f})\")\n",
    "            print(f\"   fifties: Î¼/Ïƒ = {fifties_snr:.2f} (Î¼ = {fifties_stats['mean']:.2f}, Ïƒ = {fifties_stats['std']:.2f})\")\n",
    "            print(f\"   Standardized difference (Cohen's d): {cohens_d:.2f}\")\n",
    "            print(\"â”€â”€\"*30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "492eb66c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T20:24:12.719444Z",
     "iopub.status.busy": "2025-04-23T20:24:12.719057Z",
     "iopub.status.idle": "2025-04-23T20:24:12.732485Z",
     "shell.execute_reply": "2025-04-23T20:24:12.731225Z"
    },
    "papermill": {
     "duration": 0.024243,
     "end_time": "2025-04-23T20:24:12.734734",
     "exception": false,
     "start_time": "2025-04-23T20:24:12.710491",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def plot_age_gender_dist(twenties_df, fifties_df):\n",
    "    for col in twenties_df.select_dtypes(include=np.number).columns:\n",
    "        if col == 'age':\n",
    "            continue\n",
    "            \n",
    "        # Create subsets for each demographic group\n",
    "        male_20 = twenties_df[twenties_df['gender'] == 'male'][col].dropna()\n",
    "        male_50 = fifties_df[fifties_df['gender'] == 'male'][col].dropna()\n",
    "        female_20 = twenties_df[twenties_df['gender'] == 'female'][col].dropna()\n",
    "        female_50 = fifties_df[fifties_df['gender'] == 'female'][col].dropna()\n",
    "        \n",
    "        # Calculate all Cohen's d comparisons\n",
    "        def calculate_cohens_d(group1, group2):\n",
    "            pooled_std = np.sqrt((group1.std()**2 + group2.std()**2)/2)\n",
    "            return abs(group1.mean() - group2.mean()) / pooled_std\n",
    "        \n",
    "        cohens_d = {\n",
    "            'male_vs_female_20': calculate_cohens_d(male_20, female_20),\n",
    "            'male_vs_female_50': calculate_cohens_d(male_50, female_50),\n",
    "            'age_effect_male': calculate_cohens_d(male_20, male_50),\n",
    "            'age_effect_female': calculate_cohens_d(female_20, female_50)\n",
    "        }\n",
    "        \n",
    "        # Only plot if any comparison shows meaningful effect size\n",
    "        if any(d > 0.2 for d in cohens_d.values()):\n",
    "            plt.figure(figsize=(14, 7))\n",
    "            \n",
    "            # Create plot dataframe\n",
    "            plot_df = pd.concat([\n",
    "                male_20.to_frame().assign(group='Male 20-29'),\n",
    "                male_50.to_frame().assign(group='Male 50-59'),\n",
    "                female_20.to_frame().assign(group='Female 20-29'),\n",
    "                female_50.to_frame().assign(group='Female 50-59')\n",
    "            ])\n",
    "            \n",
    "            # Plot KDE\n",
    "            palette = {'Male 20-29':'blue', 'Male 50-59':'lightblue',\n",
    "                     'Female 20-29':'red', 'Female 50-59':'orange'}\n",
    "            \n",
    "            for group, color in palette.items():\n",
    "                group_data = plot_df[plot_df['group'] == group]\n",
    "                sns.kdeplot(data=group_data, x=col, color=color, \n",
    "                            fill=True, alpha=0.2, common_norm=False, \n",
    "                            linewidth=2, label=group)\n",
    "            \n",
    "            # Add effect size annotations\n",
    "            text_y = 0.9\n",
    "            for name, d in cohens_d.items():\n",
    "                if d > 0.2:\n",
    "                    comp_name = name.replace('_', ' ').title()\n",
    "                    plt.text(0.02, text_y, f\"{comp_name}: Cohen's d = {d:.2f}\",\n",
    "                            transform=plt.gca().transAxes, fontsize=10,\n",
    "                            bbox=dict(facecolor='white', alpha=0.7))\n",
    "                    text_y -= 0.08\n",
    "            \n",
    "            plt.title(f\"Distribution of {col}\\n(Only showing comparisons with Cohen's d > 0.2)\")\n",
    "            plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\n",
    "            plt.tight_layout()\n",
    "            plt.show()\n",
    "            \n",
    "            # Print detailed statistics\n",
    "            print(f\"\\nðŸ“Š {col} - Effect Size Analysis:\")\n",
    "            print(f\"  Male 20s vs Female 20s: d = {cohens_d['male_vs_female_20']:.2f}\")\n",
    "            print(f\"  Male 50s vs Female 50s: d = {cohens_d['male_vs_female_50']:.2f}\")\n",
    "            print(f\"  Age Effect (Male 20s vs 50s): d = {cohens_d['age_effect_male']:.2f}\")\n",
    "            print(f\"  Age Effect (Female 20s vs 50s): d = {cohens_d['age_effect_female']:.2f}\")\n",
    "            print(\"â”€â”€\"*40)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "fa078ef0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T20:24:12.750743Z",
     "iopub.status.busy": "2025-04-23T20:24:12.750448Z",
     "iopub.status.idle": "2025-04-23T20:24:12.761510Z",
     "shell.execute_reply": "2025-04-23T20:24:12.760663Z"
    },
    "papermill": {
     "duration": 0.021067,
     "end_time": "2025-04-23T20:24:12.763248",
     "exception": false,
     "start_time": "2025-04-23T20:24:12.742181",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def duration_plot(male_df, female_df):\n",
    "    # Calculate statistics\n",
    "    twenties_stats = {'mean': male_df['duration'].mean(), 'std': male_df['duration'].std()}\n",
    "    fifties_stats = {'mean': female_df['duration'].mean(), 'std': female_df['duration'].std()}\n",
    "    \n",
    "    # Calculate signal-to-noise ratio (mean/std)\n",
    "    twenties_snr = abs(twenties_stats['mean']) / twenties_stats['std'] if twenties_stats['std'] != 0 else 0\n",
    "    fifties_snr = abs(fifties_stats['mean']) / fifties_stats['std'] if fifties_stats['std'] != 0 else 0\n",
    "    \n",
    "    # Calculate standardized mean difference (Cohen's d)\n",
    "    pooled_std = np.sqrt((twenties_stats['std']**2 + fifties_stats['std']**2)/2)\n",
    "    cohens_d = abs(twenties_stats['mean'] - fifties_stats['mean']) / pooled_std\n",
    "    \n",
    "    plt.figure(figsize=(12, 6))\n",
    "    \n",
    "    # Create temp dataframe with age groups for plotting\n",
    "    plot_df = pd.concat([\n",
    "        twenties_df['duration'].to_frame().assign(age_group='20-29'),\n",
    "        fifties_df['duration'].to_frame().assign(age_group='50-59')\n",
    "    ])\n",
    "    \n",
    "    # Distribution plot\n",
    "    sns.kdeplot(data=plot_df, x='duration', hue='age_group', fill=True, alpha=0.3, \n",
    "               common_norm=False, palette={'20-29':'blue', '50-59':'orange'})\n",
    "    \n",
    "    # Add statistics annotations\n",
    "    plt.axvline(twenties_stats['mean'], color='blue', linestyle='--', \n",
    "                label=f\"twenties: Î¼ = {twenties_stats['mean']:.2f}, Ïƒ = {twenties_stats['std']:.2f}\")\n",
    "    plt.axvline(fifties_stats['mean'], color='orange', linestyle='--',\n",
    "                label=f\"fifties: Î¼ = {fifties_stats['mean']:.2f}, Ïƒ = {fifties_stats['std']:.2f}\")\n",
    "    \n",
    "    # Add std ranges\n",
    "    plt.axvspan(twenties_stats['mean'] - twenties_stats['std'], twenties_stats['mean'] + twenties_stats['std'], \n",
    "                color='blue', alpha=0.1)\n",
    "    plt.axvspan(fifties_stats['mean'] - fifties_stats['std'], fifties_stats['mean'] + fifties_stats['std'],\n",
    "               color='orange', alpha=0.1)\n",
    "    \n",
    "    plt.title(f\"{col}\\nCohen's d = {cohens_d:.2f} (twenties SNR: {twenties_snr:.2f}, fifties SNR: {fifties_snr:.2f})\")\n",
    "    plt.legend()\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "    \n",
    "    # Print comprehensive comparison\n",
    "    print(f\"\\nðŸ“Š duration\")\n",
    "    print(f\"   twenties: Î¼/Ïƒ = {twenties_snr:.2f} (Î¼ = {twenties_stats['mean']:.2f}, Ïƒ = {twenties_stats['std']:.2f})\")\n",
    "    print(f\"   fifties: Î¼/Ïƒ = {fifties_snr:.2f} (Î¼ = {fifties_stats['mean']:.2f}, Ïƒ = {fifties_stats['std']:.2f})\")\n",
    "    print(f\"   Standardized difference (Cohen's d): {cohens_d:.2f}\")\n",
    "    print(\"â”€â”€\"*30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "97a5791c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T20:24:12.780303Z",
     "iopub.status.busy": "2025-04-23T20:24:12.779342Z",
     "iopub.status.idle": "2025-04-23T20:24:12.785237Z",
     "shell.execute_reply": "2025-04-23T20:24:12.784419Z"
    },
    "papermill": {
     "duration": 0.016123,
     "end_time": "2025-04-23T20:24:12.786857",
     "exception": false,
     "start_time": "2025-04-23T20:24:12.770734",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def analyze_feature_correlations(df, threshold=0.5):\n",
    "    \n",
    "    numeric_df = df.select_dtypes(include=['number'])\n",
    "    \n",
    "    corr_matrix = numeric_df.corr()\n",
    "    \n",
    "    # Find high correlations\n",
    "    high_corr = []\n",
    "    for i in range(len(corr_matrix.columns)):\n",
    "        for j in range(i):\n",
    "            if abs(corr_matrix.iloc[i, j]) > threshold:\n",
    "                high_corr.append((corr_matrix.columns[i], corr_matrix.columns[j], \n",
    "                                 corr_matrix.iloc[i, j]))\n",
    "    return high_corr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "a5f41bcc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T20:24:12.803214Z",
     "iopub.status.busy": "2025-04-23T20:24:12.802876Z",
     "iopub.status.idle": "2025-04-23T20:24:12.809191Z",
     "shell.execute_reply": "2025-04-23T20:24:12.808108Z"
    },
    "papermill": {
     "duration": 0.016479,
     "end_time": "2025-04-23T20:24:12.810948",
     "exception": false,
     "start_time": "2025-04-23T20:24:12.794469",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def features_to_keep(all_features, corr_features, to_be_removed):\n",
    "    features_set = set()\n",
    "    to_keep = []\n",
    "    for removed in to_be_removed:\n",
    "        features_set.add(removed)\n",
    "    \n",
    "    for x, y, z in corr_features:\n",
    "        if x not in features_set and y not in features_set:\n",
    "            to_keep.append(x)\n",
    "            features_set.add(x)\n",
    "            features_set.add(y)\n",
    "\n",
    "    for feature in all_features:\n",
    "        if feature not in features_set:\n",
    "            to_keep.append(feature)\n",
    "\n",
    "    return to_keep"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c09d20a",
   "metadata": {
    "papermill": {
     "duration": 0.00743,
     "end_time": "2025-04-23T20:24:12.826422",
     "exception": false,
     "start_time": "2025-04-23T20:24:12.818992",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Calls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "c1d261b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T20:24:12.843039Z",
     "iopub.status.busy": "2025-04-23T20:24:12.842713Z",
     "iopub.status.idle": "2025-04-23T20:24:13.080241Z",
     "shell.execute_reply": "2025-04-23T20:24:13.079171Z"
    },
    "papermill": {
     "duration": 0.247621,
     "end_time": "2025-04-23T20:24:13.082047",
     "exception": false,
     "start_time": "2025-04-23T20:24:12.834426",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "outliers_cols = find_high_outlier_columns(df)\n",
    "visualize_outliers(df, outliers_cols)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "b2ab737e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T20:24:13.099627Z",
     "iopub.status.busy": "2025-04-23T20:24:13.099299Z",
     "iopub.status.idle": "2025-04-23T20:24:13.104032Z",
     "shell.execute_reply": "2025-04-23T20:24:13.103207Z"
    },
    "papermill": {
     "duration": 0.015705,
     "end_time": "2025-04-23T20:24:13.105612",
     "exception": false,
     "start_time": "2025-04-23T20:24:13.089907",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "view_outlier_dist(df, outliers_cols)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f340dc16",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T20:24:13.122886Z",
     "iopub.status.busy": "2025-04-23T20:24:13.122581Z",
     "iopub.status.idle": "2025-04-23T20:24:13.132583Z",
     "shell.execute_reply": "2025-04-23T20:24:13.131719Z"
    },
    "papermill": {
     "duration": 0.02012,
     "end_time": "2025-04-23T20:24:13.134380",
     "exception": false,
     "start_time": "2025-04-23T20:24:13.114260",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "assert check_nulls(df) == True, 'there are nulls'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "10588abc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T20:24:13.151167Z",
     "iopub.status.busy": "2025-04-23T20:24:13.150845Z",
     "iopub.status.idle": "2025-04-23T20:24:14.249179Z",
     "shell.execute_reply": "2025-04-23T20:24:14.248279Z"
    },
    "papermill": {
     "duration": 1.109003,
     "end_time": "2025-04-23T20:24:14.250968",
     "exception": false,
     "start_time": "2025-04-23T20:24:13.141965",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_normalized, transformations = smart_normalize(df)\n",
    "outliers_cols = find_high_outlier_columns(df_normalized)\n",
    "df_clean = remove_outliers(df_normalized, outliers_cols)\n",
    "df = df_clean.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "0b739ea8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T20:24:14.269984Z",
     "iopub.status.busy": "2025-04-23T20:24:14.269659Z",
     "iopub.status.idle": "2025-04-23T20:24:14.284691Z",
     "shell.execute_reply": "2025-04-23T20:24:14.283550Z"
    },
    "papermill": {
     "duration": 0.02648,
     "end_time": "2025-04-23T20:24:14.286435",
     "exception": false,
     "start_time": "2025-04-23T20:24:14.259955",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "male_df = df[df['gender'] == 'male']\n",
    "female_df = df[df['gender'] == 'female']\n",
    "twenties_df = df[df['age'] == 'twenties']\n",
    "fifties_df = df[df['age'] == 'fifties']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "c423ccfd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T20:24:14.303045Z",
     "iopub.status.busy": "2025-04-23T20:24:14.302225Z",
     "iopub.status.idle": "2025-04-23T20:24:14.551431Z",
     "shell.execute_reply": "2025-04-23T20:24:14.550539Z"
    },
    "papermill": {
     "duration": 0.259365,
     "end_time": "2025-04-23T20:24:14.553144",
     "exception": false,
     "start_time": "2025-04-23T20:24:14.293779",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "correlated_features = analyze_feature_correlations(df, 0.8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "141e7081",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T20:24:14.569597Z",
     "iopub.status.busy": "2025-04-23T20:24:14.569222Z",
     "iopub.status.idle": "2025-04-23T20:24:14.575679Z",
     "shell.execute_reply": "2025-04-23T20:24:14.574704Z"
    },
    "papermill": {
     "duration": 0.016786,
     "end_time": "2025-04-23T20:24:14.577436",
     "exception": false,
     "start_time": "2025-04-23T20:24:14.560650",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "remaining_features = features_to_keep(df.select_dtypes(include=['number']).columns, correlated_features, to_be_removed=['duration'])\n",
    "remaining_features.append('age')\n",
    "remaining_features.append('gender')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "60532e1d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T20:24:14.662571Z",
     "iopub.status.busy": "2025-04-23T20:24:14.662191Z",
     "iopub.status.idle": "2025-04-23T20:24:14.667945Z",
     "shell.execute_reply": "2025-04-23T20:24:14.667192Z"
    },
    "papermill": {
     "duration": 0.083806,
     "end_time": "2025-04-23T20:24:14.669547",
     "exception": false,
     "start_time": "2025-04-23T20:24:14.585741",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "assert len(remaining_features) == len(set(remaining_features)), 'problem in feature selection'\n",
    "df = df[remaining_features]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ffe8eddc",
   "metadata": {
    "papermill": {
     "duration": 0.007231,
     "end_time": "2025-04-23T20:24:14.684346",
     "exception": false,
     "start_time": "2025-04-23T20:24:14.677115",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Baseline Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "00aa4cd7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T20:24:14.700896Z",
     "iopub.status.busy": "2025-04-23T20:24:14.700214Z",
     "iopub.status.idle": "2025-04-23T20:24:15.287757Z",
     "shell.execute_reply": "2025-04-23T20:24:15.286695Z"
    },
    "papermill": {
     "duration": 0.598034,
     "end_time": "2025-04-23T20:24:15.289717",
     "exception": false,
     "start_time": "2025-04-23T20:24:14.691683",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import classification_report, accuracy_score\n",
    "from sklearn.decomposition import PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "11c101c0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T20:24:15.306497Z",
     "iopub.status.busy": "2025-04-23T20:24:15.306043Z",
     "iopub.status.idle": "2025-04-23T20:24:15.311872Z",
     "shell.execute_reply": "2025-04-23T20:24:15.310801Z"
    },
    "papermill": {
     "duration": 0.016014,
     "end_time": "2025-04-23T20:24:15.313582",
     "exception": false,
     "start_time": "2025-04-23T20:24:15.297568",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def baseline(X, y):\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "    clf = RandomForestClassifier(random_state=42)\n",
    "    clf.fit(X_train, y_train)\n",
    "\n",
    "    y_pred = clf.predict(X_test)\n",
    "    \n",
    "    print(\"Accuracy:\", accuracy_score(y_test, y_pred))\n",
    "    print(classification_report(y_test, y_pred))\n",
    "    return clf.feature_importances_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "b5b7eef8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T20:24:15.330083Z",
     "iopub.status.busy": "2025-04-23T20:24:15.329758Z",
     "iopub.status.idle": "2025-04-23T20:24:15.338383Z",
     "shell.execute_reply": "2025-04-23T20:24:15.337383Z"
    },
    "papermill": {
     "duration": 0.018954,
     "end_time": "2025-04-23T20:24:15.340243",
     "exception": false,
     "start_time": "2025-04-23T20:24:15.321289",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = df.drop(['gender', 'age'], axis=1)\n",
    "y = df['gender'].map({'male' : 1, 'female' : 0})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "af027c75",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T20:24:15.357333Z",
     "iopub.status.busy": "2025-04-23T20:24:15.356928Z",
     "iopub.status.idle": "2025-04-23T20:24:17.259681Z",
     "shell.execute_reply": "2025-04-23T20:24:17.258533Z"
    },
    "papermill": {
     "duration": 1.913395,
     "end_time": "2025-04-23T20:24:17.261390",
     "exception": false,
     "start_time": "2025-04-23T20:24:15.347995",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.944043321299639\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.93      0.77      0.84       107\n",
      "           1       0.95      0.99      0.97       447\n",
      "\n",
      "    accuracy                           0.94       554\n",
      "   macro avg       0.94      0.88      0.90       554\n",
      "weighted avg       0.94      0.94      0.94       554\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([0.00400663, 0.0042118 , 0.00298712, 0.00384302, 0.00633327,\n",
       "       0.00729927, 0.00737868, 0.00436669, 0.00452631, 0.00502385,\n",
       "       0.00400039, 0.00399862, 0.00349569, 0.00292848, 0.00556328,\n",
       "       0.00502521, 0.00344858, 0.1660525 , 0.03682537, 0.15308658,\n",
       "       0.08353224, 0.00390796, 0.00444037, 0.00381434, 0.00693066,\n",
       "       0.01432076, 0.00795375, 0.00491837, 0.00663616, 0.01345993,\n",
       "       0.01270288, 0.01163911, 0.01063156, 0.00410107, 0.00490946,\n",
       "       0.0055542 , 0.00721941, 0.00550879, 0.00812529, 0.00329129,\n",
       "       0.0075872 , 0.00401565, 0.00314237, 0.00510138, 0.00451245,\n",
       "       0.00324689, 0.00285321, 0.00278864, 0.00359134, 0.00277298,\n",
       "       0.00331995, 0.00319554, 0.00262283, 0.00431209, 0.00266208,\n",
       "       0.00479654, 0.00432352, 0.00459552, 0.00340175, 0.00367614,\n",
       "       0.00342258, 0.00361487, 0.00376717, 0.00292467, 0.0032799 ,\n",
       "       0.00240123, 0.00277403, 0.00392936, 0.00280058, 0.00443839,\n",
       "       0.00430111, 0.00433912, 0.00465648, 0.00806781, 0.00361136,\n",
       "       0.00414913, 0.00551762, 0.00524671, 0.00355252, 0.00971848,\n",
       "       0.00497382, 0.00437478, 0.00416181, 0.00453365, 0.00332263,\n",
       "       0.00397747, 0.00371142, 0.00395523, 0.00324657, 0.00491085,\n",
       "       0.00870825, 0.01530182, 0.00671225, 0.00350737, 0.00355833,\n",
       "       0.00548369, 0.00305992, 0.00504702, 0.00350555, 0.00358926,\n",
       "       0.07062256, 0.00346024, 0.00524538])"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "baseline(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "41c4f1a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T20:24:17.278850Z",
     "iopub.status.busy": "2025-04-23T20:24:17.278554Z",
     "iopub.status.idle": "2025-04-23T20:24:17.343613Z",
     "shell.execute_reply": "2025-04-23T20:24:17.342794Z"
    },
    "papermill": {
     "duration": 0.076445,
     "end_time": "2025-04-23T20:24:17.345711",
     "exception": false,
     "start_time": "2025-04-23T20:24:17.269266",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pca = PCA(n_components=90)  \n",
    "X_pca = pca.fit_transform(X)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "ea40eb0b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T20:24:17.372657Z",
     "iopub.status.busy": "2025-04-23T20:24:17.372312Z",
     "iopub.status.idle": "2025-04-23T20:24:17.906603Z",
     "shell.execute_reply": "2025-04-23T20:24:17.905528Z"
    },
    "papermill": {
     "duration": 0.549954,
     "end_time": "2025-04-23T20:24:17.908418",
     "exception": false,
     "start_time": "2025-04-23T20:24:17.358464",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 5))\n",
    "plt.bar(range(pca.n_components_), pca.explained_variance_ratio_)\n",
    "plt.xlabel('Principal Component')\n",
    "plt.ylabel('Explained Variance Ratio')\n",
    "plt.title('PCA Explained Variance')\n",
    "plt.show()\n",
    "\n",
    "cumulative_variance = np.cumsum(pca.explained_variance_ratio_)\n",
    "plt.plot(cumulative_variance, marker='o')\n",
    "plt.axhline(y=0.95, color='r', linestyle='--', label='95% Variance')\n",
    "plt.xlabel('Number of Components')\n",
    "plt.ylabel('Cumulative Explained Variance')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "be90092d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T20:24:17.927830Z",
     "iopub.status.busy": "2025-04-23T20:24:17.927486Z",
     "iopub.status.idle": "2025-04-23T20:24:19.853579Z",
     "shell.execute_reply": "2025-04-23T20:24:19.852789Z"
    },
    "papermill": {
     "duration": 1.937574,
     "end_time": "2025-04-23T20:24:19.855080",
     "exception": false,
     "start_time": "2025-04-23T20:24:17.917506",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.944043321299639\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.93      0.77      0.84       107\n",
      "           1       0.95      0.99      0.97       447\n",
      "\n",
      "    accuracy                           0.94       554\n",
      "   macro avg       0.94      0.88      0.90       554\n",
      "weighted avg       0.94      0.94      0.94       554\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([0.00400663, 0.0042118 , 0.00298712, 0.00384302, 0.00633327,\n",
       "       0.00729927, 0.00737868, 0.00436669, 0.00452631, 0.00502385,\n",
       "       0.00400039, 0.00399862, 0.00349569, 0.00292848, 0.00556328,\n",
       "       0.00502521, 0.00344858, 0.1660525 , 0.03682537, 0.15308658,\n",
       "       0.08353224, 0.00390796, 0.00444037, 0.00381434, 0.00693066,\n",
       "       0.01432076, 0.00795375, 0.00491837, 0.00663616, 0.01345993,\n",
       "       0.01270288, 0.01163911, 0.01063156, 0.00410107, 0.00490946,\n",
       "       0.0055542 , 0.00721941, 0.00550879, 0.00812529, 0.00329129,\n",
       "       0.0075872 , 0.00401565, 0.00314237, 0.00510138, 0.00451245,\n",
       "       0.00324689, 0.00285321, 0.00278864, 0.00359134, 0.00277298,\n",
       "       0.00331995, 0.00319554, 0.00262283, 0.00431209, 0.00266208,\n",
       "       0.00479654, 0.00432352, 0.00459552, 0.00340175, 0.00367614,\n",
       "       0.00342258, 0.00361487, 0.00376717, 0.00292467, 0.0032799 ,\n",
       "       0.00240123, 0.00277403, 0.00392936, 0.00280058, 0.00443839,\n",
       "       0.00430111, 0.00433912, 0.00465648, 0.00806781, 0.00361136,\n",
       "       0.00414913, 0.00551762, 0.00524671, 0.00355252, 0.00971848,\n",
       "       0.00497382, 0.00437478, 0.00416181, 0.00453365, 0.00332263,\n",
       "       0.00397747, 0.00371142, 0.00395523, 0.00324657, 0.00491085,\n",
       "       0.00870825, 0.01530182, 0.00671225, 0.00350737, 0.00355833,\n",
       "       0.00548369, 0.00305992, 0.00504702, 0.00350555, 0.00358926,\n",
       "       0.07062256, 0.00346024, 0.00524538])"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "baseline(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "cff266b7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T20:24:19.874286Z",
     "iopub.status.busy": "2025-04-23T20:24:19.873936Z",
     "iopub.status.idle": "2025-04-23T20:24:22.221037Z",
     "shell.execute_reply": "2025-04-23T20:24:22.220042Z"
    },
    "papermill": {
     "duration": 2.358669,
     "end_time": "2025-04-23T20:24:22.222836",
     "exception": false,
     "start_time": "2025-04-23T20:24:19.864167",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.8285198555956679\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.77      0.10      0.17       102\n",
      "           1       0.83      0.99      0.90       452\n",
      "\n",
      "    accuracy                           0.83       554\n",
      "   macro avg       0.80      0.55      0.54       554\n",
      "weighted avg       0.82      0.83      0.77       554\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([0.00842994, 0.01098226, 0.00902479, 0.00780335, 0.00968346,\n",
       "       0.00878699, 0.01166097, 0.01040085, 0.00777543, 0.00606172,\n",
       "       0.01241539, 0.0067922 , 0.00625396, 0.00773765, 0.01025351,\n",
       "       0.0109113 , 0.00644645, 0.01941776, 0.01004598, 0.02736405,\n",
       "       0.01544807, 0.01031319, 0.00972612, 0.01167701, 0.00816852,\n",
       "       0.0232265 , 0.01278964, 0.01355427, 0.01192606, 0.01038959,\n",
       "       0.00865366, 0.01808883, 0.01063901, 0.00971825, 0.01239709,\n",
       "       0.01102731, 0.01250433, 0.01205558, 0.01166901, 0.00938032,\n",
       "       0.00662666, 0.00920767, 0.00757953, 0.00849875, 0.00729765,\n",
       "       0.00725348, 0.00620396, 0.00932199, 0.0074951 , 0.00793906,\n",
       "       0.00750738, 0.00731213, 0.00588783, 0.00766386, 0.00698841,\n",
       "       0.00682327, 0.00802518, 0.01083009, 0.01009594, 0.00967738,\n",
       "       0.0091772 , 0.00824174, 0.0079656 , 0.00730628, 0.00714813,\n",
       "       0.00801843, 0.00689169, 0.00785568, 0.00836391, 0.00790341,\n",
       "       0.00685825, 0.00861678, 0.01041306, 0.00695614, 0.01006997,\n",
       "       0.00973167, 0.00781165, 0.01410102, 0.00844015, 0.00845426,\n",
       "       0.00786746, 0.00713846, 0.0089917 , 0.01201484, 0.00811729,\n",
       "       0.00782529, 0.00962151, 0.00712683, 0.00796533, 0.00575985,\n",
       "       0.00723832, 0.01307609, 0.01128408, 0.00879793, 0.01022611,\n",
       "       0.00924095, 0.00950013, 0.00789701, 0.00976387, 0.01190689,\n",
       "       0.01966216, 0.00790443, 0.01091275])"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = df.drop(['gender', 'age'], axis=1)\n",
    "y = df['age'].map({'twenties' : 1, 'fifties' : 0})\n",
    "baseline(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8ec3a5b6",
   "metadata": {
    "papermill": {
     "duration": 0.011207,
     "end_time": "2025-04-23T20:24:22.243485",
     "exception": false,
     "start_time": "2025-04-23T20:24:22.232278",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "54168cef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T20:24:22.263991Z",
     "iopub.status.busy": "2025-04-23T20:24:22.263707Z",
     "iopub.status.idle": "2025-04-23T20:24:22.849549Z",
     "shell.execute_reply": "2025-04-23T20:24:22.848576Z"
    },
    "papermill": {
     "duration": 0.598435,
     "end_time": "2025-04-23T20:24:22.851509",
     "exception": false,
     "start_time": "2025-04-23T20:24:22.253074",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.to_csv('/kaggle/working/fixed.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ac088f2c",
   "metadata": {
    "papermill": {
     "duration": 0.00908,
     "end_time": "2025-04-23T20:24:22.870826",
     "exception": false,
     "start_time": "2025-04-23T20:24:22.861746",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "53f2b3b1",
   "metadata": {
    "papermill": {
     "duration": 0.009079,
     "end_time": "2025-04-23T20:24:22.889560",
     "exception": false,
     "start_time": "2025-04-23T20:24:22.880481",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 7232074,
     "sourceId": 11530342,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7234277,
     "sourceId": 11534405,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7234326,
     "sourceId": 11534495,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31012,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 21.375894,
   "end_time": "2025-04-23T20:24:23.620451",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-04-23T20:24:02.244557",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
