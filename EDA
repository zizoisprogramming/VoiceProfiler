{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":11530342,"sourceType":"datasetVersion","datasetId":7232074},{"sourceId":11534405,"sourceType":"datasetVersion","datasetId":7234277},{"sourceId":11534495,"sourceType":"datasetVersion","datasetId":7234326},{"sourceId":11535118,"sourceType":"datasetVersion","datasetId":7234625},{"sourceId":11535160,"sourceType":"datasetVersion","datasetId":7234645},{"sourceId":11564594,"sourceType":"datasetVersion","datasetId":7250969},{"sourceId":11566134,"sourceType":"datasetVersion","datasetId":7251821},{"sourceId":11567248,"sourceType":"datasetVersion","datasetId":7252428},{"sourceId":11572767,"sourceType":"datasetVersion","datasetId":7255564},{"sourceId":11604105,"sourceType":"datasetVersion","datasetId":7278116},{"sourceId":11604910,"sourceType":"datasetVersion","datasetId":7278751}],"dockerImageVersionId":31012,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler, PowerTransformer, RobustScaler\nfrom scipy.stats import skew\nfrom matplotlib.gridspec import GridSpec\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-28T23:16:37.614496Z","iopub.execute_input":"2025-04-28T23:16:37.614819Z","iopub.status.idle":"2025-04-28T23:16:37.619652Z","shell.execute_reply.started":"2025-04-28T23:16:37.614796Z","shell.execute_reply":"2025-04-28T23:16:37.618761Z"}},"outputs":[],"execution_count":309},{"cell_type":"code","source":"features = pd.read_csv(\"/kaggle/input/voide-features-7/features_mix_b_8.csv\")\nextra_features = pd.read_csv(\"/kaggle/input/voide-features-7/features_mix_b_10.csv\")\n#assert (features.columns == extra_features.columns).all() == True, 'mismatch in features'\nextra_features_v2 = pd.read_csv(\"/kaggle/input/voide-features-7/extracted_features_rand_b2_b3.csv\")\n# assert (extra_features_v2.columns == extra_features.columns).all() == True, 'mismatch in features'\nextra_features_v3 = pd.read_csv(\"/kaggle/input/voice-features-8/fifties_b1_b4.csv\")\nextra_features_v4 = pd.read_csv(\"/kaggle/input/voice-features-10/random_13.csv\")\nextra_features_v5 = pd.read_csv(\"/kaggle/input/voice-features-10/random_18.csv\")\nextra_features_v6 = pd.read_csv(\"/kaggle/input/voice-features-10/random_18_v2.csv\")\nextra_features_v7 = pd.read_csv(\"/kaggle/input/voice-features-11/random_13_v2.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T23:16:37.622514Z","iopub.execute_input":"2025-04-28T23:16:37.622762Z","iopub.status.idle":"2025-04-28T23:16:38.476224Z","shell.execute_reply.started":"2025-04-28T23:16:37.622734Z","shell.execute_reply":"2025-04-28T23:16:38.475424Z"}},"outputs":[],"execution_count":310},{"cell_type":"code","source":"def get_data_again():\n    return pd.concat([features, extra_features, extra_features_v2,extra_features_v3,\n                      extra_features_v4, extra_features_v5, extra_features_v6, extra_features_v7]).drop_duplicates().reset_index(drop=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T23:16:38.477677Z","iopub.execute_input":"2025-04-28T23:16:38.478000Z","iopub.status.idle":"2025-04-28T23:16:38.483079Z","shell.execute_reply.started":"2025-04-28T23:16:38.477967Z","shell.execute_reply":"2025-04-28T23:16:38.482135Z"}},"outputs":[],"execution_count":311},{"cell_type":"code","source":"df = get_data_again()\n#df = features.copy()\ndf.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T23:16:38.483922Z","iopub.execute_input":"2025-04-28T23:16:38.484205Z","iopub.status.idle":"2025-04-28T23:16:38.928426Z","shell.execute_reply.started":"2025-04-28T23:16:38.484185Z","shell.execute_reply":"2025-04-28T23:16:38.927546Z"}},"outputs":[{"execution_count":312,"output_type":"execute_result","data":{"text/plain":"   duration       wps     f0_mean     f0_std  f0_5_percentile  \\\n0     5.064  2.172196  114.259135  18.341788        97.669136   \n1     3.504  2.283105  134.909844  23.734217       103.438377   \n2     2.136  2.808989  150.824815  43.612041       112.561576   \n3     6.216  2.091377  161.058022  64.168748       127.024257   \n4     5.952  2.184140  121.853499  54.374061       100.857904   \n\n   f0_95_percentile     tempo     formant1     formant2     formant3  ...  \\\n0        147.435296  4.936809   273.441744  1793.527680  2759.452953  ...   \n1        176.672391  5.993151   618.792273  2822.487135  3382.503538  ...   \n2        186.976438  6.554307  1965.978427  3559.584239  4100.387947  ...   \n3        201.714550  6.435006  1022.126984  1880.411185  2989.751582  ...   \n4        149.027677  6.552419   641.887002  1574.589248  2658.949499  ...   \n\n   mfcc_11_skewness  mfcc_12_skewness  cpp_mean  ste_mean   ste_std  \\\n0         -0.479527         -0.605145 -0.000146  2.738589  5.658169   \n1         -0.137940         -0.028807 -0.006580  0.834333  2.473366   \n2         -0.070889         -0.506446  0.021628  1.278238  1.507383   \n3         -0.436321         -0.620298 -0.000986  0.525617  1.331778   \n4         -0.413126         -0.085429  0.006296  2.510140  5.993181   \n\n     ste_max       ste_min  ste_variance  gender       age  \n0  35.430437  1.570975e-06     32.014881    male  twenties  \n1  17.545838  3.346054e-06      6.117538    male   fifties  \n2   8.112347  1.607106e-04      2.272205    male  twenties  \n3  11.978915  1.210356e-06      1.773634    male  twenties  \n4  51.756200  3.690771e-09     35.918218    male  twenties  \n\n[5 rows x 122 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>duration</th>\n      <th>wps</th>\n      <th>f0_mean</th>\n      <th>f0_std</th>\n      <th>f0_5_percentile</th>\n      <th>f0_95_percentile</th>\n      <th>tempo</th>\n      <th>formant1</th>\n      <th>formant2</th>\n      <th>formant3</th>\n      <th>...</th>\n      <th>mfcc_11_skewness</th>\n      <th>mfcc_12_skewness</th>\n      <th>cpp_mean</th>\n      <th>ste_mean</th>\n      <th>ste_std</th>\n      <th>ste_max</th>\n      <th>ste_min</th>\n      <th>ste_variance</th>\n      <th>gender</th>\n      <th>age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>5.064</td>\n      <td>2.172196</td>\n      <td>114.259135</td>\n      <td>18.341788</td>\n      <td>97.669136</td>\n      <td>147.435296</td>\n      <td>4.936809</td>\n      <td>273.441744</td>\n      <td>1793.527680</td>\n      <td>2759.452953</td>\n      <td>...</td>\n      <td>-0.479527</td>\n      <td>-0.605145</td>\n      <td>-0.000146</td>\n      <td>2.738589</td>\n      <td>5.658169</td>\n      <td>35.430437</td>\n      <td>1.570975e-06</td>\n      <td>32.014881</td>\n      <td>male</td>\n      <td>twenties</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3.504</td>\n      <td>2.283105</td>\n      <td>134.909844</td>\n      <td>23.734217</td>\n      <td>103.438377</td>\n      <td>176.672391</td>\n      <td>5.993151</td>\n      <td>618.792273</td>\n      <td>2822.487135</td>\n      <td>3382.503538</td>\n      <td>...</td>\n      <td>-0.137940</td>\n      <td>-0.028807</td>\n      <td>-0.006580</td>\n      <td>0.834333</td>\n      <td>2.473366</td>\n      <td>17.545838</td>\n      <td>3.346054e-06</td>\n      <td>6.117538</td>\n      <td>male</td>\n      <td>fifties</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2.136</td>\n      <td>2.808989</td>\n      <td>150.824815</td>\n      <td>43.612041</td>\n      <td>112.561576</td>\n      <td>186.976438</td>\n      <td>6.554307</td>\n      <td>1965.978427</td>\n      <td>3559.584239</td>\n      <td>4100.387947</td>\n      <td>...</td>\n      <td>-0.070889</td>\n      <td>-0.506446</td>\n      <td>0.021628</td>\n      <td>1.278238</td>\n      <td>1.507383</td>\n      <td>8.112347</td>\n      <td>1.607106e-04</td>\n      <td>2.272205</td>\n      <td>male</td>\n      <td>twenties</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>6.216</td>\n      <td>2.091377</td>\n      <td>161.058022</td>\n      <td>64.168748</td>\n      <td>127.024257</td>\n      <td>201.714550</td>\n      <td>6.435006</td>\n      <td>1022.126984</td>\n      <td>1880.411185</td>\n      <td>2989.751582</td>\n      <td>...</td>\n      <td>-0.436321</td>\n      <td>-0.620298</td>\n      <td>-0.000986</td>\n      <td>0.525617</td>\n      <td>1.331778</td>\n      <td>11.978915</td>\n      <td>1.210356e-06</td>\n      <td>1.773634</td>\n      <td>male</td>\n      <td>twenties</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5.952</td>\n      <td>2.184140</td>\n      <td>121.853499</td>\n      <td>54.374061</td>\n      <td>100.857904</td>\n      <td>149.027677</td>\n      <td>6.552419</td>\n      <td>641.887002</td>\n      <td>1574.589248</td>\n      <td>2658.949499</td>\n      <td>...</td>\n      <td>-0.413126</td>\n      <td>-0.085429</td>\n      <td>0.006296</td>\n      <td>2.510140</td>\n      <td>5.993181</td>\n      <td>51.756200</td>\n      <td>3.690771e-09</td>\n      <td>35.918218</td>\n      <td>male</td>\n      <td>twenties</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 122 columns</p>\n</div>"},"metadata":{}}],"execution_count":312},{"cell_type":"code","source":"df.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T23:16:38.930675Z","iopub.execute_input":"2025-04-28T23:16:38.931319Z","iopub.status.idle":"2025-04-28T23:16:39.309941Z","shell.execute_reply.started":"2025-04-28T23:16:38.931281Z","shell.execute_reply":"2025-04-28T23:16:39.309043Z"}},"outputs":[{"execution_count":313,"output_type":"execute_result","data":{"text/plain":"           duration           wps       f0_mean        f0_std  \\\ncount  32807.000000  32807.000000  32806.000000  32806.000000   \nmean       4.791774      1.981507    157.345672     54.184743   \nstd        1.705457      0.528337     46.096119     37.054067   \nmin        2.016000      0.267094     78.645380      1.192743   \n25%        3.456000      1.614987    124.427078     24.082303   \n50%        4.584000      1.931567    144.224870     46.675088   \n75%        5.904000      2.291667    180.408374     74.168623   \nmax       56.184000      6.628788    501.757682    231.613655   \n\n       f0_5_percentile  f0_95_percentile         tempo      formant1  \\\ncount     32806.000000      32806.000000  32807.000000  32807.000000   \nmean        110.470143        251.143622      5.070783    688.476783   \nstd          30.120001        126.212449      1.275484    450.213881   \nmin          75.067418         81.541633      0.345304     50.166478   \n25%          89.548057        157.459846      4.230945    384.357744   \n50%         101.845825        201.592837      5.050505    526.531529   \n75%         121.512573        306.723478      5.882353    832.836187   \nmax         460.533413        597.935330     14.047619   3784.262202   \n\n           formant2      formant3  ...  mfcc_9_skewness  mfcc_10_skewness  \\\ncount  32807.000000  32805.000000  ...     32807.000000      32807.000000   \nmean    1829.852740   2878.917320  ...        -0.443319         -0.279268   \nstd      554.069076    541.865948  ...         0.476681          0.511685   \nmin      296.877303    869.977162  ...        -3.904349         -3.571684   \n25%     1452.201279   2522.442510  ...        -0.734735         -0.607995   \n50%     1788.010989   2810.640092  ...        -0.470789         -0.312394   \n75%     2165.162545   3202.536487  ...        -0.184767          0.030290   \nmax     4310.272582   5437.260625  ...         2.196037          2.347060   \n\n       mfcc_11_skewness  mfcc_12_skewness      cpp_mean      ste_mean  \\\ncount      32807.000000      32807.000000  32807.000000  32807.000000   \nmean          -0.337752         -0.245669     -0.003207      1.895764   \nstd            0.453409          0.506054      0.036030      2.181048   \nmin           -3.105003         -2.827483     -0.271296      0.000100   \n25%           -0.616632         -0.578793     -0.023366      0.402548   \n50%           -0.354980         -0.273737     -0.001309      1.368271   \n75%           -0.075689          0.075281      0.019636      2.636783   \nmax            3.093596          2.199279      0.172027     49.807609   \n\n            ste_std       ste_max       ste_min  ste_variance  \ncount  32807.000000  32807.000000  3.280700e+04  3.280700e+04  \nmean       3.330606     18.947303  1.306229e-04  2.233637e+01  \nstd        3.353174     18.179415  9.929546e-04  6.367699e+01  \nmin        0.000227      0.001594  4.357569e-26  5.144331e-08  \n25%        0.807064      4.885135  3.058637e-08  6.513528e-01  \n50%        2.658682     15.677339  1.195190e-06  7.068590e+00  \n75%        4.785451     27.227573  1.875408e-05  2.290054e+01  \nmax       53.231715    222.406592  7.704531e-02  2.833615e+03  \n\n[8 rows x 120 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>duration</th>\n      <th>wps</th>\n      <th>f0_mean</th>\n      <th>f0_std</th>\n      <th>f0_5_percentile</th>\n      <th>f0_95_percentile</th>\n      <th>tempo</th>\n      <th>formant1</th>\n      <th>formant2</th>\n      <th>formant3</th>\n      <th>...</th>\n      <th>mfcc_9_skewness</th>\n      <th>mfcc_10_skewness</th>\n      <th>mfcc_11_skewness</th>\n      <th>mfcc_12_skewness</th>\n      <th>cpp_mean</th>\n      <th>ste_mean</th>\n      <th>ste_std</th>\n      <th>ste_max</th>\n      <th>ste_min</th>\n      <th>ste_variance</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>32807.000000</td>\n      <td>32807.000000</td>\n      <td>32806.000000</td>\n      <td>32806.000000</td>\n      <td>32806.000000</td>\n      <td>32806.000000</td>\n      <td>32807.000000</td>\n      <td>32807.000000</td>\n      <td>32807.000000</td>\n      <td>32805.000000</td>\n      <td>...</td>\n      <td>32807.000000</td>\n      <td>32807.000000</td>\n      <td>32807.000000</td>\n      <td>32807.000000</td>\n      <td>32807.000000</td>\n      <td>32807.000000</td>\n      <td>32807.000000</td>\n      <td>32807.000000</td>\n      <td>3.280700e+04</td>\n      <td>3.280700e+04</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>4.791774</td>\n      <td>1.981507</td>\n      <td>157.345672</td>\n      <td>54.184743</td>\n      <td>110.470143</td>\n      <td>251.143622</td>\n      <td>5.070783</td>\n      <td>688.476783</td>\n      <td>1829.852740</td>\n      <td>2878.917320</td>\n      <td>...</td>\n      <td>-0.443319</td>\n      <td>-0.279268</td>\n      <td>-0.337752</td>\n      <td>-0.245669</td>\n      <td>-0.003207</td>\n      <td>1.895764</td>\n      <td>3.330606</td>\n      <td>18.947303</td>\n      <td>1.306229e-04</td>\n      <td>2.233637e+01</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.705457</td>\n      <td>0.528337</td>\n      <td>46.096119</td>\n      <td>37.054067</td>\n      <td>30.120001</td>\n      <td>126.212449</td>\n      <td>1.275484</td>\n      <td>450.213881</td>\n      <td>554.069076</td>\n      <td>541.865948</td>\n      <td>...</td>\n      <td>0.476681</td>\n      <td>0.511685</td>\n      <td>0.453409</td>\n      <td>0.506054</td>\n      <td>0.036030</td>\n      <td>2.181048</td>\n      <td>3.353174</td>\n      <td>18.179415</td>\n      <td>9.929546e-04</td>\n      <td>6.367699e+01</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>2.016000</td>\n      <td>0.267094</td>\n      <td>78.645380</td>\n      <td>1.192743</td>\n      <td>75.067418</td>\n      <td>81.541633</td>\n      <td>0.345304</td>\n      <td>50.166478</td>\n      <td>296.877303</td>\n      <td>869.977162</td>\n      <td>...</td>\n      <td>-3.904349</td>\n      <td>-3.571684</td>\n      <td>-3.105003</td>\n      <td>-2.827483</td>\n      <td>-0.271296</td>\n      <td>0.000100</td>\n      <td>0.000227</td>\n      <td>0.001594</td>\n      <td>4.357569e-26</td>\n      <td>5.144331e-08</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>3.456000</td>\n      <td>1.614987</td>\n      <td>124.427078</td>\n      <td>24.082303</td>\n      <td>89.548057</td>\n      <td>157.459846</td>\n      <td>4.230945</td>\n      <td>384.357744</td>\n      <td>1452.201279</td>\n      <td>2522.442510</td>\n      <td>...</td>\n      <td>-0.734735</td>\n      <td>-0.607995</td>\n      <td>-0.616632</td>\n      <td>-0.578793</td>\n      <td>-0.023366</td>\n      <td>0.402548</td>\n      <td>0.807064</td>\n      <td>4.885135</td>\n      <td>3.058637e-08</td>\n      <td>6.513528e-01</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>4.584000</td>\n      <td>1.931567</td>\n      <td>144.224870</td>\n      <td>46.675088</td>\n      <td>101.845825</td>\n      <td>201.592837</td>\n      <td>5.050505</td>\n      <td>526.531529</td>\n      <td>1788.010989</td>\n      <td>2810.640092</td>\n      <td>...</td>\n      <td>-0.470789</td>\n      <td>-0.312394</td>\n      <td>-0.354980</td>\n      <td>-0.273737</td>\n      <td>-0.001309</td>\n      <td>1.368271</td>\n      <td>2.658682</td>\n      <td>15.677339</td>\n      <td>1.195190e-06</td>\n      <td>7.068590e+00</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>5.904000</td>\n      <td>2.291667</td>\n      <td>180.408374</td>\n      <td>74.168623</td>\n      <td>121.512573</td>\n      <td>306.723478</td>\n      <td>5.882353</td>\n      <td>832.836187</td>\n      <td>2165.162545</td>\n      <td>3202.536487</td>\n      <td>...</td>\n      <td>-0.184767</td>\n      <td>0.030290</td>\n      <td>-0.075689</td>\n      <td>0.075281</td>\n      <td>0.019636</td>\n      <td>2.636783</td>\n      <td>4.785451</td>\n      <td>27.227573</td>\n      <td>1.875408e-05</td>\n      <td>2.290054e+01</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>56.184000</td>\n      <td>6.628788</td>\n      <td>501.757682</td>\n      <td>231.613655</td>\n      <td>460.533413</td>\n      <td>597.935330</td>\n      <td>14.047619</td>\n      <td>3784.262202</td>\n      <td>4310.272582</td>\n      <td>5437.260625</td>\n      <td>...</td>\n      <td>2.196037</td>\n      <td>2.347060</td>\n      <td>3.093596</td>\n      <td>2.199279</td>\n      <td>0.172027</td>\n      <td>49.807609</td>\n      <td>53.231715</td>\n      <td>222.406592</td>\n      <td>7.704531e-02</td>\n      <td>2.833615e+03</td>\n    </tr>\n  </tbody>\n</table>\n<p>8 rows Ã— 120 columns</p>\n</div>"},"metadata":{}}],"execution_count":313},{"cell_type":"code","source":"def check_nulls(df):\n    a = df.isna().sum()\n    for index, value in a.items():\n        if value > 0:\n            return False\n    return True","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T23:16:39.311063Z","iopub.execute_input":"2025-04-28T23:16:39.311431Z","iopub.status.idle":"2025-04-28T23:16:39.318023Z","shell.execute_reply.started":"2025-04-28T23:16:39.311396Z","shell.execute_reply":"2025-04-28T23:16:39.316110Z"}},"outputs":[],"execution_count":314},{"cell_type":"code","source":"def smart_normalize(df, skew_threshold=0.5):\n\n    numeric_cols = df.select_dtypes(include=['number']).columns\n    df_normalized = df.copy()\n    transformations = {}\n    \n    # Step 1: Skewness correction\n    for col in numeric_cols:\n        col_skew = skew(df[col].dropna())\n        if abs(col_skew) > skew_threshold:\n            # Apply Yeo-Johnson power transform (handles positive/negative values)\n            pt = PowerTransformer(method='yeo-johnson')\n            df_normalized[col] = pt.fit_transform(df[[col]]).flatten()\n            transformations[col] = {\n                'step1': 'power_transform',\n                'skewness': col_skew,\n                'transformer': pt\n            }\n        else:\n            transformations[col] = {\n                'step1': 'none',\n                'skewness': col_skew\n            }\n    \n    # Step 2: Standard scaling (applied to all numeric columns)\n    scaler = StandardScaler()\n    df_normalized[numeric_cols] = scaler.fit_transform(df_normalized[numeric_cols])\n    transformations['_standard_scaler'] = scaler\n    \n    return df_normalized, transformations","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T23:16:39.319103Z","iopub.execute_input":"2025-04-28T23:16:39.319471Z","iopub.status.idle":"2025-04-28T23:16:39.335041Z","shell.execute_reply.started":"2025-04-28T23:16:39.319447Z","shell.execute_reply":"2025-04-28T23:16:39.334105Z"}},"outputs":[],"execution_count":315},{"cell_type":"code","source":"def remove_outliers(df, outliers_cols, threshold_percent = 1):\n    numeric_cols = df.select_dtypes(include=['number']).columns\n    df_clean = df.copy()\n    \n    for i, (col, states) in enumerate(outliers_cols.items()):\n        if states['percent'] < threshold_percent:\n            lower_bound = states['lower_bound']\n            upper_bound = states['upper_bound']\n            \n            df_clean = df_clean[(df_clean[col] >= lower_bound) & (df_clean[col] <= upper_bound)]\n        \n    return df_clean","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T23:16:39.336114Z","iopub.execute_input":"2025-04-28T23:16:39.336473Z","iopub.status.idle":"2025-04-28T23:16:39.358358Z","shell.execute_reply.started":"2025-04-28T23:16:39.336441Z","shell.execute_reply":"2025-04-28T23:16:39.357442Z"}},"outputs":[],"execution_count":316},{"cell_type":"code","source":"def find_high_outlier_columns(df):\n    outlier_columns = {}\n    \n    for col in df.select_dtypes(include=np.number).columns:\n        if col == 'age' or df[col].nunique() < 10:  \n            continue\n            \n        Q1 = df[col].quantile(0.05)\n        Q3 = df[col].quantile(0.95)\n        IQR = Q3 - Q1\n        \n        lower_bound = Q1 - 1.5 * IQR\n        upper_bound = Q3 + 1.5 * IQR\n        \n        outliers = df[(df[col] < lower_bound) | (df[col] > upper_bound)][col]\n        outlier_percent = (len(outliers) / len(df[col].dropna())) * 100\n        \n        outlier_columns[col] = {\n            'percent': outlier_percent,\n            'count': len(outliers),\n            'lower_bound': lower_bound,\n            'upper_bound': upper_bound\n        }\n            \n    return outlier_columns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T23:16:39.359468Z","iopub.execute_input":"2025-04-28T23:16:39.359994Z","iopub.status.idle":"2025-04-28T23:16:39.377805Z","shell.execute_reply.started":"2025-04-28T23:16:39.359968Z","shell.execute_reply":"2025-04-28T23:16:39.376887Z"}},"outputs":[],"execution_count":317},{"cell_type":"code","source":"def visualize_outliers(df, outlier_columns):\n    if not outlier_columns:\n        print(\"No columns with more than 5% outliers found.\")\n        return\n        \n    for i, (col, stats) in enumerate(outlier_columns.items()):\n        if stats['percent'] > 5:\n            plt.figure(figsize=(15, 8))\n            gs = GridSpec(2, 2, height_ratios=[3, 1])\n            \n            # Box plot\n            ax1 = plt.subplot(gs[0, 0])\n            sns.boxplot(x=df[col], ax=ax1)\n            ax1.set_title(f\"Box Plot: {col}\")\n            \n            # Histogram with KDE\n            ax2 = plt.subplot(gs[0, 1])\n            sns.histplot(df[col], kde=True, ax=ax2)\n            ax2.axvline(stats['lower_bound'], color='r', linestyle='--', label='Outlier Threshold')\n            ax2.axvline(stats['upper_bound'], color='r', linestyle='--')\n            ax2.legend()\n            ax2.set_title(f\"Distribution: {col}\")\n            \n            # Outlier detail table\n            ax3 = plt.subplot(gs[1, :])\n            ax3.axis('off')\n            outlier_text = (\n                f\"Column: {col}\\n\"\n                f\"Outliers: {stats['count']} values ({stats['percent']:.2f}% of non-null data)\\n\"\n                f\"Lower bound: {stats['lower_bound']:.2f}\\n\"\n                f\"Upper bound: {stats['upper_bound']:.2f}\\n\"\n                f\"Min: {df[col].min():.2f}, Max: {df[col].max():.2f}\\n\"\n                f\"Mean: {df[col].mean():.2f}, Median: {df[col].median():.2f}\"\n            )\n            ax3.text(0.5, 0.5, outlier_text, ha='center', va='center', fontsize=12)\n            \n            plt.tight_layout()\n            plt.show()\n            \n            # Print summary\n            print(f\"\\nðŸ“Š Outlier Analysis for {col}:\")\n            print(f\"  â€¢ {stats['percent']:.2f}% of values are outliers ({stats['count']} out of {len(df[col].dropna())})\")\n            print(f\"  â€¢ Outlier thresholds: < {stats['lower_bound']:.2f} or > {stats['upper_bound']:.2f}\")\n            print(\"â”€â”€\"*40)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T23:16:39.378954Z","iopub.execute_input":"2025-04-28T23:16:39.379306Z","iopub.status.idle":"2025-04-28T23:16:39.404172Z","shell.execute_reply.started":"2025-04-28T23:16:39.379268Z","shell.execute_reply":"2025-04-28T23:16:39.403152Z"}},"outputs":[],"execution_count":318},{"cell_type":"code","source":"def view_outlier_dist(df, outlier_columns):\n    for i, (col, stats) in enumerate(outlier_columns.items()):\n        if stats['percent'] > 5:\n            df_clean = df.copy()\n            df = df_clean[(df_clean[col] >= stats['lower_bound']) & (df_clean[col] <= stats['upper_bound'])]\n            \n            male_df = df_clean[df_clean['gender'] == 'male']\n            female_df = df_clean[df_clean['gender'] == 'female']\n                \n            male_stats = {'mean': male_df[col].mean(), 'std': male_df[col].std()}\n            female_stats = {'mean': female_df[col].mean(), 'std': female_df[col].std()}\n            \n            male_snr = abs(male_stats['mean']) / male_stats['std'] if male_stats['std'] != 0 else 0\n            female_snr = abs(female_stats['mean']) / female_stats['std'] if female_stats['std'] != 0 else 0\n            \n            pooled_std = np.sqrt((male_stats['std']**2 + female_stats['std']**2)/2)\n            cohens_d = abs(male_stats['mean'] - female_stats['mean']) / pooled_std\n            print(cohens_d)\n            \n            plt.figure(figsize=(12, 6))\n            \n            # Distribution plot\n            sns.kdeplot(data=df_clean, x=col, hue='gender', fill=True, alpha=0.3, \n                       common_norm=False, palette={'male':'blue', 'female':'orange'}, hue_order=('male', 'female'))\n            \n            plt.axvline(male_stats['mean'], color='blue', linestyle='--', \n                        label=f\"Male: Î¼ = {male_stats['mean']:.2f}, Ïƒ = {male_stats['std']:.2f}\")\n            plt.axvline(female_stats['mean'], color='orange', linestyle='--',\n                        label=f\"Female: Î¼ = {female_stats['mean']:.2f}, Ïƒ = {female_stats['std']:.2f}\")\n            \n            plt.axvspan(male_stats['mean'] - male_stats['std'], male_stats['mean'] + male_stats['std'], \n                        color='blue', alpha=0.1)\n            plt.axvspan(female_stats['mean'] - female_stats['std'], female_stats['mean'] + female_stats['std'],\n                       color='orange', alpha=0.1)\n            \n            plt.title(f\"{col}\\nCohen's d = {cohens_d:.2f} (Male SNR: {male_snr:.2f}, Female SNR: {female_snr:.2f})\")\n            plt.legend()\n            plt.tight_layout()\n            plt.show()\n            \n            # Print comprehensive comparison\n            print(f\"\\nðŸ“Š {col}\")\n            print(f\"   Male: Î¼/Ïƒ = {male_snr:.2f} (Î¼ = {male_stats['mean']:.2f}, Ïƒ = {male_stats['std']:.2f})\")\n            print(f\" Female: Î¼/Ïƒ = {female_snr:.2f} (Î¼ = {female_stats['mean']:.2f}, Ïƒ = {female_stats['std']:.2f})\")\n            print(f\" Standardized difference (Cohen's d): {cohens_d:.2f}\")\n            print(\"â”€â”€\"*30)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T23:16:39.408486Z","iopub.execute_input":"2025-04-28T23:16:39.408895Z","iopub.status.idle":"2025-04-28T23:16:39.430078Z","shell.execute_reply.started":"2025-04-28T23:16:39.408846Z","shell.execute_reply":"2025-04-28T23:16:39.429109Z"}},"outputs":[],"execution_count":319},{"cell_type":"code","source":"def plot_male_female_diff(male_df, female_df):\n    for col in male_df.select_dtypes(include=np.number).columns:  # Only numeric columns\n        if col == 'gender':\n            continue\n            \n        male_stats = {'mean': male_df[col].mean(), 'std': male_df[col].std()}\n        female_stats = {'mean': female_df[col].mean(), 'std': female_df[col].std()}\n        \n        male_snr = abs(male_stats['mean']) / male_stats['std'] if male_stats['std'] != 0 else 0\n        female_snr = abs(female_stats['mean']) / female_stats['std'] if female_stats['std'] != 0 else 0\n        \n        pooled_std = np.sqrt((male_stats['std']**2 + female_stats['std']**2)/2)\n        cohens_d = abs(male_stats['mean'] - female_stats['mean']) / pooled_std\n        \n        if cohens_d > 0.4:\n            plt.figure(figsize=(12, 6))\n            \n            # Distribution plot\n            sns.kdeplot(data=df, x=col, hue='gender', fill=True, alpha=0.3, \n                       common_norm=False, palette={'male':'blue', 'female':'orange'}, hue_order=('male', 'female'))\n            \n            plt.axvline(male_stats['mean'], color='blue', linestyle='--', \n                        label=f\"Male: Î¼ = {male_stats['mean']:.2f}, Ïƒ = {male_stats['std']:.2f}\")\n            plt.axvline(female_stats['mean'], color='orange', linestyle='--',\n                        label=f\"Female: Î¼ = {female_stats['mean']:.2f}, Ïƒ = {female_stats['std']:.2f}\")\n            \n            plt.axvspan(male_stats['mean'] - male_stats['std'], male_stats['mean'] + male_stats['std'], \n                        color='blue', alpha=0.1)\n            plt.axvspan(female_stats['mean'] - female_stats['std'], female_stats['mean'] + female_stats['std'],\n                       color='orange', alpha=0.1)\n            \n            plt.title(f\"{col}\\nCohen's d = {cohens_d:.2f} (Male SNR: {male_snr:.2f}, Female SNR: {female_snr:.2f})\")\n            plt.legend()\n            plt.tight_layout()\n            plt.show()\n            \n            # Print comprehensive comparison\n            print(f\"\\nðŸ“Š {col}\")\n            print(f\"   Male: Î¼/Ïƒ = {male_snr:.2f} (Î¼ = {male_stats['mean']:.2f}, Ïƒ = {male_stats['std']:.2f})\")\n            print(f\" Female: Î¼/Ïƒ = {female_snr:.2f} (Î¼ = {female_stats['mean']:.2f}, Ïƒ = {female_stats['std']:.2f})\")\n            print(f\" Standardized difference (Cohen's d): {cohens_d:.2f}\")\n            print(\"â”€â”€\"*30)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T23:16:39.431187Z","iopub.execute_input":"2025-04-28T23:16:39.431557Z","iopub.status.idle":"2025-04-28T23:16:39.457540Z","shell.execute_reply.started":"2025-04-28T23:16:39.431505Z","shell.execute_reply":"2025-04-28T23:16:39.456545Z"}},"outputs":[],"execution_count":320},{"cell_type":"code","source":"def plot_twenties_vs_fifties(twenties_df, fifties_df):\n    for col in twenties_df.select_dtypes(include=np.number).columns:  \n        if col == 'age':  \n            continue\n            \n        # Calculate statistics\n        twenties_stats = {'mean': twenties_df[col].mean(), 'std': twenties_df[col].std()}\n        fifties_stats = {'mean': fifties_df[col].mean(), 'std': fifties_df[col].std()}\n        \n        # Calculate signal-to-noise ratio (mean/std)\n        twenties_snr = abs(twenties_stats['mean']) / twenties_stats['std'] if twenties_stats['std'] != 0 else 0\n        fifties_snr = abs(fifties_stats['mean']) / fifties_stats['std'] if fifties_stats['std'] != 0 else 0\n        \n        # Calculate standardized mean difference (Cohen's d)\n        pooled_std = np.sqrt((twenties_stats['std']**2 + fifties_stats['std']**2)/2)\n        cohens_d = abs(twenties_stats['mean'] - fifties_stats['mean']) / pooled_std\n        \n        # Only plot if substantial difference exists (Cohen's d > 0.4 effect)\n        if cohens_d > 0.2:\n            plt.figure(figsize=(12, 6))\n            \n            # Create temp dataframe with age groups for plotting\n            plot_df = pd.concat([\n                twenties_df[col].to_frame().assign(age_group='20-29'),\n                fifties_df[col].to_frame().assign(age_group='50-59')\n            ])\n            \n            # Distribution plot\n            sns.kdeplot(data=plot_df, x=col, hue='age_group', fill=True, alpha=0.3, \n                       common_norm=False, palette={'20-29':'blue', '50-59':'orange'})\n            \n            # Add statistics annotations\n            plt.axvline(twenties_stats['mean'], color='blue', linestyle='--', \n                        label=f\"twenties: Î¼ = {twenties_stats['mean']:.2f}, Ïƒ = {twenties_stats['std']:.2f}\")\n            plt.axvline(fifties_stats['mean'], color='orange', linestyle='--',\n                        label=f\"fifties: Î¼ = {fifties_stats['mean']:.2f}, Ïƒ = {fifties_stats['std']:.2f}\")\n            \n            # Add std ranges\n            plt.axvspan(twenties_stats['mean'] - twenties_stats['std'], twenties_stats['mean'] + twenties_stats['std'], \n                        color='blue', alpha=0.1)\n            plt.axvspan(fifties_stats['mean'] - fifties_stats['std'], fifties_stats['mean'] + fifties_stats['std'],\n                       color='orange', alpha=0.1)\n            \n            plt.title(f\"{col}\\nCohen's d = {cohens_d:.2f} (twenties SNR: {twenties_snr:.2f}, fifties SNR: {fifties_snr:.2f})\")\n            plt.legend()\n            plt.tight_layout()\n            plt.show()\n            \n            # Print comprehensive comparison\n            print(f\"\\nðŸ“Š {col}\")\n            print(f\"   twenties: Î¼/Ïƒ = {twenties_snr:.2f} (Î¼ = {twenties_stats['mean']:.2f}, Ïƒ = {twenties_stats['std']:.2f})\")\n            print(f\"   fifties: Î¼/Ïƒ = {fifties_snr:.2f} (Î¼ = {fifties_stats['mean']:.2f}, Ïƒ = {fifties_stats['std']:.2f})\")\n            print(f\"   Standardized difference (Cohen's d): {cohens_d:.2f}\")\n            print(\"â”€â”€\"*30)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T23:16:39.458681Z","iopub.execute_input":"2025-04-28T23:16:39.459039Z","iopub.status.idle":"2025-04-28T23:16:39.478881Z","shell.execute_reply.started":"2025-04-28T23:16:39.459006Z","shell.execute_reply":"2025-04-28T23:16:39.478010Z"}},"outputs":[],"execution_count":321},{"cell_type":"code","source":"def plot_age_gender_dist(twenties_df, fifties_df):\n    for col in twenties_df.select_dtypes(include=np.number).columns:\n        if col == 'age':\n            continue\n            \n        # Create subsets for each demographic group\n        male_20 = twenties_df[twenties_df['gender'] == 'male'][col].dropna()\n        male_50 = fifties_df[fifties_df['gender'] == 'male'][col].dropna()\n        female_20 = twenties_df[twenties_df['gender'] == 'female'][col].dropna()\n        female_50 = fifties_df[fifties_df['gender'] == 'female'][col].dropna()\n        \n        # Calculate all Cohen's d comparisons\n        def calculate_cohens_d(group1, group2):\n            pooled_std = np.sqrt((group1.std()**2 + group2.std()**2)/2)\n            return abs(group1.mean() - group2.mean()) / pooled_std\n        \n        cohens_d = {\n            'male_vs_female_20': calculate_cohens_d(male_20, female_20),\n            'male_vs_female_50': calculate_cohens_d(male_50, female_50),\n            'age_effect_male': calculate_cohens_d(male_20, male_50),\n            'age_effect_female': calculate_cohens_d(female_20, female_50)\n        }\n        \n        # Only plot if any comparison shows meaningful effect size\n        if any(d > 0.2 for d in cohens_d.values()):\n            plt.figure(figsize=(14, 7))\n            \n            # Create plot dataframe\n            plot_df = pd.concat([\n                male_20.to_frame().assign(group='Male 20-29'),\n                male_50.to_frame().assign(group='Male 50-59'),\n                female_20.to_frame().assign(group='Female 20-29'),\n                female_50.to_frame().assign(group='Female 50-59')\n            ])\n            \n            # Plot KDE\n            palette = {'Male 20-29':'blue', 'Male 50-59':'lightblue',\n                     'Female 20-29':'red', 'Female 50-59':'orange'}\n            \n            for group, color in palette.items():\n                group_data = plot_df[plot_df['group'] == group]\n                sns.kdeplot(data=group_data, x=col, color=color, \n                            fill=True, alpha=0.2, common_norm=False, \n                            linewidth=2, label=group)\n            \n            # Add effect size annotations\n            text_y = 0.9\n            for name, d in cohens_d.items():\n                if d > 0.2:\n                    comp_name = name.replace('_', ' ').title()\n                    plt.text(0.02, text_y, f\"{comp_name}: Cohen's d = {d:.2f}\",\n                            transform=plt.gca().transAxes, fontsize=10,\n                            bbox=dict(facecolor='white', alpha=0.7))\n                    text_y -= 0.08\n            \n            plt.title(f\"Distribution of {col}\\n(Only showing comparisons with Cohen's d > 0.2)\")\n            plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\n            plt.tight_layout()\n            plt.show()\n            \n            # Print detailed statistics\n            print(f\"\\nðŸ“Š {col} - Effect Size Analysis:\")\n            print(f\"  Male 20s vs Female 20s: d = {cohens_d['male_vs_female_20']:.2f}\")\n            print(f\"  Male 50s vs Female 50s: d = {cohens_d['male_vs_female_50']:.2f}\")\n            print(f\"  Age Effect (Male 20s vs 50s): d = {cohens_d['age_effect_male']:.2f}\")\n            print(f\"  Age Effect (Female 20s vs 50s): d = {cohens_d['age_effect_female']:.2f}\")\n            print(\"â”€â”€\"*40)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T23:16:39.479998Z","iopub.execute_input":"2025-04-28T23:16:39.480335Z","iopub.status.idle":"2025-04-28T23:16:39.506032Z","shell.execute_reply.started":"2025-04-28T23:16:39.480309Z","shell.execute_reply":"2025-04-28T23:16:39.505110Z"}},"outputs":[],"execution_count":322},{"cell_type":"code","source":"def duration_plot(male_df, female_df):\n    # Calculate statistics\n    twenties_stats = {'mean': male_df['duration'].mean(), 'std': male_df['duration'].std()}\n    fifties_stats = {'mean': female_df['duration'].mean(), 'std': female_df['duration'].std()}\n    \n    # Calculate signal-to-noise ratio (mean/std)\n    twenties_snr = abs(twenties_stats['mean']) / twenties_stats['std'] if twenties_stats['std'] != 0 else 0\n    fifties_snr = abs(fifties_stats['mean']) / fifties_stats['std'] if fifties_stats['std'] != 0 else 0\n    \n    # Calculate standardized mean difference (Cohen's d)\n    pooled_std = np.sqrt((twenties_stats['std']**2 + fifties_stats['std']**2)/2)\n    cohens_d = abs(twenties_stats['mean'] - fifties_stats['mean']) / pooled_std\n    \n    plt.figure(figsize=(12, 6))\n    \n    # Create temp dataframe with age groups for plotting\n    plot_df = pd.concat([\n        twenties_df['duration'].to_frame().assign(age_group='20-29'),\n        fifties_df['duration'].to_frame().assign(age_group='50-59')\n    ])\n    \n    # Distribution plot\n    sns.kdeplot(data=plot_df, x='duration', hue='age_group', fill=True, alpha=0.3, \n               common_norm=False, palette={'20-29':'blue', '50-59':'orange'})\n    \n    # Add statistics annotations\n    plt.axvline(twenties_stats['mean'], color='blue', linestyle='--', \n                label=f\"twenties: Î¼ = {twenties_stats['mean']:.2f}, Ïƒ = {twenties_stats['std']:.2f}\")\n    plt.axvline(fifties_stats['mean'], color='orange', linestyle='--',\n                label=f\"fifties: Î¼ = {fifties_stats['mean']:.2f}, Ïƒ = {fifties_stats['std']:.2f}\")\n    \n    # Add std ranges\n    plt.axvspan(twenties_stats['mean'] - twenties_stats['std'], twenties_stats['mean'] + twenties_stats['std'], \n                color='blue', alpha=0.1)\n    plt.axvspan(fifties_stats['mean'] - fifties_stats['std'], fifties_stats['mean'] + fifties_stats['std'],\n               color='orange', alpha=0.1)\n    \n    plt.title(f\"{col}\\nCohen's d = {cohens_d:.2f} (twenties SNR: {twenties_snr:.2f}, fifties SNR: {fifties_snr:.2f})\")\n    plt.legend()\n    plt.tight_layout()\n    plt.show()\n    \n    # Print comprehensive comparison\n    print(f\"\\nðŸ“Š duration\")\n    print(f\"   twenties: Î¼/Ïƒ = {twenties_snr:.2f} (Î¼ = {twenties_stats['mean']:.2f}, Ïƒ = {twenties_stats['std']:.2f})\")\n    print(f\"   fifties: Î¼/Ïƒ = {fifties_snr:.2f} (Î¼ = {fifties_stats['mean']:.2f}, Ïƒ = {fifties_stats['std']:.2f})\")\n    print(f\"   Standardized difference (Cohen's d): {cohens_d:.2f}\")\n    print(\"â”€â”€\"*30)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T23:16:39.507086Z","iopub.execute_input":"2025-04-28T23:16:39.507401Z","iopub.status.idle":"2025-04-28T23:16:39.528748Z","shell.execute_reply.started":"2025-04-28T23:16:39.507374Z","shell.execute_reply":"2025-04-28T23:16:39.527734Z"}},"outputs":[],"execution_count":323},{"cell_type":"code","source":"def analyze_feature_correlations(df, threshold=0.5):\n    \n    numeric_df = df.select_dtypes(include=['number'])\n    \n    corr_matrix = numeric_df.corr()\n    \n    # Find high correlations\n    high_corr = []\n    for i in range(len(corr_matrix.columns)):\n        for j in range(i):\n            if abs(corr_matrix.iloc[i, j]) > threshold:\n                high_corr.append((corr_matrix.columns[i], corr_matrix.columns[j], \n                                 corr_matrix.iloc[i, j]))\n    return high_corr","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T23:16:39.529731Z","iopub.execute_input":"2025-04-28T23:16:39.530059Z","iopub.status.idle":"2025-04-28T23:16:39.549925Z","shell.execute_reply.started":"2025-04-28T23:16:39.530031Z","shell.execute_reply":"2025-04-28T23:16:39.548941Z"}},"outputs":[],"execution_count":324},{"cell_type":"code","source":"def features_to_keep(all_features, corr_features, to_be_removed):\n    features_set = set()\n    to_keep = []\n    for removed in to_be_removed:\n        features_set.add(removed)\n    \n    for x, y, z in corr_features:\n        if x not in features_set and y not in features_set:\n            to_keep.append(x)\n            features_set.add(x)\n            features_set.add(y)\n\n    for feature in all_features:\n        if feature not in features_set:\n            to_keep.append(feature)\n\n    return to_keep","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T23:16:39.550945Z","iopub.execute_input":"2025-04-28T23:16:39.551279Z","iopub.status.idle":"2025-04-28T23:16:39.571200Z","shell.execute_reply.started":"2025-04-28T23:16:39.551252Z","shell.execute_reply":"2025-04-28T23:16:39.570170Z"}},"outputs":[],"execution_count":325},{"cell_type":"markdown","source":"## Calls","metadata":{}},{"cell_type":"code","source":"outliers_cols = find_high_outlier_columns(df)\nvisualize_outliers(df, outliers_cols)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T23:16:39.572247Z","iopub.execute_input":"2025-04-28T23:16:39.572576Z","iopub.status.idle":"2025-04-28T23:16:40.176269Z","shell.execute_reply.started":"2025-04-28T23:16:39.572548Z","shell.execute_reply":"2025-04-28T23:16:40.175434Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pandas/core/computation/expressions.py:73: RuntimeWarning: invalid value encountered in less\n  return op(a, b)\n/usr/local/lib/python3.11/dist-packages/pandas/core/computation/expressions.py:73: RuntimeWarning: invalid value encountered in greater\n  return op(a, b)\n/usr/local/lib/python3.11/dist-packages/pandas/core/computation/expressions.py:73: RuntimeWarning: invalid value encountered in less\n  return op(a, b)\n/usr/local/lib/python3.11/dist-packages/pandas/core/computation/expressions.py:73: RuntimeWarning: invalid value encountered in greater\n  return op(a, b)\n/usr/local/lib/python3.11/dist-packages/pandas/core/computation/expressions.py:73: RuntimeWarning: invalid value encountered in less\n  return op(a, b)\n/usr/local/lib/python3.11/dist-packages/pandas/core/computation/expressions.py:73: RuntimeWarning: invalid value encountered in greater\n  return op(a, b)\n/usr/local/lib/python3.11/dist-packages/pandas/core/computation/expressions.py:73: RuntimeWarning: invalid value encountered in less\n  return op(a, b)\n/usr/local/lib/python3.11/dist-packages/pandas/core/computation/expressions.py:73: RuntimeWarning: invalid value encountered in greater\n  return op(a, b)\n/usr/local/lib/python3.11/dist-packages/pandas/core/computation/expressions.py:73: RuntimeWarning: invalid value encountered in less\n  return op(a, b)\n/usr/local/lib/python3.11/dist-packages/pandas/core/computation/expressions.py:73: RuntimeWarning: invalid value encountered in greater\n  return op(a, b)\n","output_type":"stream"}],"execution_count":326},{"cell_type":"code","source":"view_outlier_dist(df, outliers_cols)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T23:16:40.177231Z","iopub.execute_input":"2025-04-28T23:16:40.177553Z","iopub.status.idle":"2025-04-28T23:16:40.181728Z","shell.execute_reply.started":"2025-04-28T23:16:40.177525Z","shell.execute_reply":"2025-04-28T23:16:40.180805Z"}},"outputs":[],"execution_count":327},{"cell_type":"code","source":"#assert check_nulls(df) == True, 'there are nulls'","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T23:16:40.182707Z","iopub.execute_input":"2025-04-28T23:16:40.183057Z","iopub.status.idle":"2025-04-28T23:16:40.202292Z","shell.execute_reply.started":"2025-04-28T23:16:40.183028Z","shell.execute_reply":"2025-04-28T23:16:40.201087Z"}},"outputs":[],"execution_count":328},{"cell_type":"code","source":"df = df.dropna()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T23:16:40.203511Z","iopub.execute_input":"2025-04-28T23:16:40.203838Z","iopub.status.idle":"2025-04-28T23:16:40.256414Z","shell.execute_reply.started":"2025-04-28T23:16:40.203815Z","shell.execute_reply":"2025-04-28T23:16:40.255376Z"}},"outputs":[],"execution_count":329},{"cell_type":"code","source":"df_normalized, transformations = smart_normalize(df)\noutliers_cols = find_high_outlier_columns(df_normalized)\ndf_clean = remove_outliers(df_normalized, outliers_cols)\ndf = df_clean.copy()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T23:16:40.257444Z","iopub.execute_input":"2025-04-28T23:16:40.257783Z","iopub.status.idle":"2025-04-28T23:16:44.674135Z","shell.execute_reply.started":"2025-04-28T23:16:40.257756Z","shell.execute_reply":"2025-04-28T23:16:44.673195Z"}},"outputs":[],"execution_count":330},{"cell_type":"code","source":"male_df = df[df['gender'] == 'male']\nfemale_df = df[df['gender'] == 'female']\ntwenties_df = df[df['age'] == 'twenties']\nfifties_df = df[df['age'] == 'fifties']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T23:16:44.675203Z","iopub.execute_input":"2025-04-28T23:16:44.675523Z","iopub.status.idle":"2025-04-28T23:16:44.714808Z","shell.execute_reply.started":"2025-04-28T23:16:44.675493Z","shell.execute_reply":"2025-04-28T23:16:44.713911Z"}},"outputs":[],"execution_count":331},{"cell_type":"code","source":"correlated_features = analyze_feature_correlations(df, 0.8)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T23:16:44.715833Z","iopub.execute_input":"2025-04-28T23:16:44.716238Z","iopub.status.idle":"2025-04-28T23:16:46.136829Z","shell.execute_reply.started":"2025-04-28T23:16:44.716210Z","shell.execute_reply":"2025-04-28T23:16:46.135801Z"}},"outputs":[],"execution_count":332},{"cell_type":"code","source":"remaining_features = features_to_keep(df.select_dtypes(include=['number']).columns, correlated_features, to_be_removed=['duration'])\nremaining_features.append('age')\nremaining_features.append('gender')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T23:16:46.137984Z","iopub.execute_input":"2025-04-28T23:16:46.138220Z","iopub.status.idle":"2025-04-28T23:16:46.150701Z","shell.execute_reply.started":"2025-04-28T23:16:46.138199Z","shell.execute_reply":"2025-04-28T23:16:46.149108Z"}},"outputs":[],"execution_count":333},{"cell_type":"code","source":"assert len(remaining_features) == len(set(remaining_features)), 'problem in feature selection'\ndf = df[remaining_features]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T23:16:46.151988Z","iopub.execute_input":"2025-04-28T23:16:46.152412Z","iopub.status.idle":"2025-04-28T23:16:46.168357Z","shell.execute_reply.started":"2025-04-28T23:16:46.152379Z","shell.execute_reply":"2025-04-28T23:16:46.167201Z"}},"outputs":[],"execution_count":334},{"cell_type":"code","source":"print(len(df) ,len(get_data_again()))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T23:16:46.169549Z","iopub.execute_input":"2025-04-28T23:16:46.169904Z","iopub.status.idle":"2025-04-28T23:16:46.392989Z","shell.execute_reply.started":"2025-04-28T23:16:46.169841Z","shell.execute_reply":"2025-04-28T23:16:46.391554Z"}},"outputs":[{"name":"stdout","text":"31997 32807\n","output_type":"stream"}],"execution_count":335},{"cell_type":"markdown","source":"## Baseline Model","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, accuracy_score, confusion_matrix\nfrom sklearn.decomposition import PCA\nfrom sklearn.base import clone\nfrom sklearn.model_selection import KFold\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.svm import SVC\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom sklearn.multiclass import OneVsRestClassifier\nfrom joblib import dump\nfrom sklearn.metrics import classification_report\nfrom sklearn.utils import shuffle","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T23:16:46.394315Z","iopub.execute_input":"2025-04-28T23:16:46.394817Z","iopub.status.idle":"2025-04-28T23:16:46.402751Z","shell.execute_reply.started":"2025-04-28T23:16:46.394784Z","shell.execute_reply":"2025-04-28T23:16:46.400965Z"}},"outputs":[],"execution_count":336},{"cell_type":"code","source":"def baseline(X, y):\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    clf = RandomForestClassifier(random_state=42)\n    clf.fit(X_train, y_train)\n\n    y_pred = clf.predict(X_test)\n    \n    print(\"Accuracy:\", accuracy_score(y_test, y_pred))\n    print(classification_report(y_test, y_pred))\n    return clf.feature_importances_","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T23:16:46.409493Z","iopub.execute_input":"2025-04-28T23:16:46.410353Z","iopub.status.idle":"2025-04-28T23:16:46.428538Z","shell.execute_reply.started":"2025-04-28T23:16:46.410321Z","shell.execute_reply":"2025-04-28T23:16:46.427412Z"}},"outputs":[],"execution_count":337},{"cell_type":"code","source":"def stacked_baseline_unique_data(df, col):\n    X = df.drop(['gender', 'age'], axis=1)\n    y = df[col].map({'male': 1, 'female': 0}) if col == 'gender' else df[col].map({'twenties': 1, 'fifties': 0})\n    metric = 'accuracy' #if col == 'gender' else 'precision'\n\n    # Check class distribution\n    print(\"Class distribution:\")\n    print(y.value_counts())\n\n    # Split into 4 folds (stratified)\n    kf = KFold(n_splits=3, shuffle=True, random_state=42)\n    splits = list(kf.split(X, y))\n\n    # Define parameter grids with class_weight support\n    param_grids = {\n        'knn': {\n            'n_neighbors': np.arange(3, 20),\n            'weights': ['uniform', 'distance'],\n            'p': [1, 2]\n        },\n        'rf': {\n            'n_estimators': [200, 300, 400],\n            'max_depth': [None, 10, 30, 40],\n            'min_samples_split': [2, 5],\n            'min_samples_leaf': [1, 2, 4],\n        },\n        'et': {\n            'n_estimators': [200, 300, 400],\n            'max_depth': [None, 10, 30, 40],\n            'min_samples_split': [2, 5, 10],\n            'min_samples_leaf': [1, 2, 4],\n        }\n    }\n\n    # Initialize base models with class_weight support\n    model_templates = {\n        #'svc': SVC(random_state=42, kernel='rbf', probability=True, class_weight={0: 2, 1: 1}),\n        'knn': KNeighborsClassifier(),\n        'rf': RandomForestClassifier(random_state=42, class_weight={0: 2, 1: 1}),\n        'et': ExtraTreesClassifier(random_state=42, class_weight={0: 2, 1: 1})\n    }\n    \n    models = {}\n    meta_X = np.zeros((len(X), len(model_templates)))\n    meta_y = y.copy()\n\n    # Train each model with Class 0 emphasis\n    for i, (train_idx, _) in enumerate(splits):\n        X_train, y_train = X.iloc[train_idx], y.iloc[train_idx]\n\n        # Balance the subset (now with Class 0 priority)\n        class_1_idx = np.where(y_train == 1)[0]\n        class_0_idx = np.where(y_train == 0)[0]\n        \n        # Oversample Class 0 to ensure it's well-represented\n        n_samples = max(len(class_0_idx), len(class_1_idx))\n        replace = len(class_0_idx) < n_samples\n        sampled_class_0 = np.random.choice(class_0_idx, size=n_samples, replace=replace)\n        sampled_class_1 = np.random.choice(class_1_idx, size=n_samples, replace=len(class_1_idx) < n_samples)\n        \n        balanced_idx = np.concatenate([sampled_class_0, sampled_class_1])\n        X_balanced = X_train.iloc[balanced_idx]\n        y_balanced = y_train.iloc[balanced_idx]\n\n        # Get model name and template\n        model_name = list(model_templates.keys())[i]\n        model_template = model_templates[model_name]\n        \n        if model_name == 'svc':\n            print(f\"\\nTraining SVC with Class 0 emphasis...\")\n            model = model_template\n            model.fit(X_balanced, y_balanced)\n            models[model_name] = model\n        else:\n            # Use scoring='precision' to prioritize Class 0 correctness\n            print(f\"\\nTuning {model_name} with Class 0 priority...\")\n            search = RandomizedSearchCV(\n                estimator=model_template,\n                param_distributions=param_grids[model_name],\n                n_iter=15,\n                cv=5,\n                scoring=metric,  # Focus on minimizing False Positives (misclassified 0s)\n                random_state=42,\n                n_jobs=-1\n            )\n            search.fit(X_balanced, y_balanced)\n            models[model_name] = search.best_estimator_\n            print(f\"Best params for {model_name}: {search.best_params_}\")\n            print(f\"Best CV accuracy: {search.best_score_:.4f}\")\n\n        # Store predictions for meta-model\n        meta_X[:, i] = models[model_name].predict_proba(X)[:, 1]\n\n    # Train meta-model with Class 0 emphasis\n    meta_model = LogisticRegression(class_weight={0: 2, 1: 1})  # Higher weight for Class 0\n    meta_model.fit(meta_X, meta_y)\n\n    # Print classification report to verify Class 0 performance\n    y_pred = meta_model.predict(meta_X)\n    print(\"\\nMeta-model Performance:\")\n    print(classification_report(meta_y, y_pred))\n\n    return meta_model, models","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T23:16:46.430086Z","iopub.execute_input":"2025-04-28T23:16:46.430570Z","iopub.status.idle":"2025-04-28T23:16:46.452275Z","shell.execute_reply.started":"2025-04-28T23:16:46.430529Z","shell.execute_reply":"2025-04-28T23:16:46.450715Z"}},"outputs":[],"execution_count":338},{"cell_type":"code","source":"def predict(meta_model, models, X_test, threshold=0.5):\n    base_preds = np.zeros((len(X_test), len(models)))\n    \n    for i, (name, model) in enumerate(models.items()):\n        print(model)\n        base_preds[:, i] = model.predict_proba(X_test)[:, 1]  \n    \n    probas = meta_model.predict_proba(base_preds)[:,1]\n    preds = (probas >= threshold).astype(int)\n    \n    return preds, probas    ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T23:16:46.453543Z","iopub.execute_input":"2025-04-28T23:16:46.453842Z","iopub.status.idle":"2025-04-28T23:16:46.477228Z","shell.execute_reply.started":"2025-04-28T23:16:46.453820Z","shell.execute_reply":"2025-04-28T23:16:46.476208Z"}},"outputs":[],"execution_count":339},{"cell_type":"code","source":"df_sampled = df.sample(frac=0.8, random_state=42)\ndf_complement = df.drop(df_sampled.index)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T23:16:46.478286Z","iopub.execute_input":"2025-04-28T23:16:46.478637Z","iopub.status.idle":"2025-04-28T23:16:46.523506Z","shell.execute_reply.started":"2025-04-28T23:16:46.478615Z","shell.execute_reply":"2025-04-28T23:16:46.522166Z"}},"outputs":[],"execution_count":340},{"cell_type":"code","source":"meta_model_gender, models_gender = stacked_baseline_unique_data(df_sampled, 'gender')\nX_test = df_complement.drop(['gender', 'age'], axis=1)\ny_test = df_complement['gender'].map({'male': 1, 'female': 0})\npreds, probas = predict(meta_model_gender, models_gender, X_test)\ntest_acc = accuracy_score(y_test, preds)\nprint(f\"Test Accuracy: {test_acc:.4f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T23:16:46.524926Z","iopub.execute_input":"2025-04-28T23:16:46.525177Z","iopub.status.idle":"2025-04-29T00:04:39.076241Z","shell.execute_reply.started":"2025-04-28T23:16:46.525157Z","shell.execute_reply":"2025-04-29T00:04:39.075248Z"}},"outputs":[{"name":"stdout","text":"Class distribution:\ngender\n1    19632\n0     5966\nName: count, dtype: int64\n\nTuning knn with Class 0 priority...\nBest params for knn: {'weights': 'distance', 'p': 1, 'n_neighbors': 4}\nBest CV accuracy: 0.9510\n\nTuning rf with Class 0 priority...\nBest params for rf: {'n_estimators': 300, 'min_samples_split': 5, 'min_samples_leaf': 1, 'max_depth': None}\nBest CV accuracy: 0.9783\n\nTuning et with Class 0 priority...\nBest params for et: {'n_estimators': 400, 'min_samples_split': 2, 'min_samples_leaf': 1, 'max_depth': 40}\nBest CV accuracy: 0.9854\n\nMeta-model Performance:\n              precision    recall  f1-score   support\n\n           0       1.00      1.00      1.00      5966\n           1       1.00      1.00      1.00     19632\n\n    accuracy                           1.00     25598\n   macro avg       1.00      1.00      1.00     25598\nweighted avg       1.00      1.00      1.00     25598\n\nKNeighborsClassifier(n_neighbors=4, p=1, weights='distance')\nRandomForestClassifier(class_weight={0: 2, 1: 1}, min_samples_split=5,\n                       n_estimators=300, random_state=42)\nExtraTreesClassifier(class_weight={0: 2, 1: 1}, max_depth=40, n_estimators=400,\n                     random_state=42)\nTest Accuracy: 0.9625\n","output_type":"stream"}],"execution_count":341},{"cell_type":"code","source":"class_names = ['females', 'males']\ncm = confusion_matrix(y_test, preds)\n\nplt.figure(figsize=(8, 6))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', \n            xticklabels=class_names, \n            yticklabels=class_names)\nplt.title('Confusion Matrix')\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T00:04:39.077533Z","iopub.execute_input":"2025-04-29T00:04:39.077914Z","iopub.status.idle":"2025-04-29T00:04:39.263840Z","shell.execute_reply.started":"2025-04-29T00:04:39.077882Z","shell.execute_reply":"2025-04-29T00:04:39.262947Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":342},{"cell_type":"code","source":"df_new = df.copy()\n#df_new['label'], probas = predict(meta_model_gender, models_gender, df.drop(['age','gender'], axis=1), 0.5)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T00:04:39.264640Z","iopub.execute_input":"2025-04-29T00:04:39.264850Z","iopub.status.idle":"2025-04-29T00:04:39.280149Z","shell.execute_reply.started":"2025-04-29T00:04:39.264834Z","shell.execute_reply":"2025-04-29T00:04:39.279262Z"}},"outputs":[],"execution_count":343},{"cell_type":"code","source":"df_sampled_new = df_new.sample(frac=0.8, random_state=42)\ndf_complement_new = df_new.drop(df_sampled_new.index)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T00:04:39.281053Z","iopub.execute_input":"2025-04-29T00:04:39.281407Z","iopub.status.idle":"2025-04-29T00:04:39.311192Z","shell.execute_reply.started":"2025-04-29T00:04:39.281381Z","shell.execute_reply":"2025-04-29T00:04:39.310111Z"}},"outputs":[],"execution_count":344},{"cell_type":"code","source":"assert len(df_complement_new) > 2000, 'error'","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T00:04:39.312540Z","iopub.execute_input":"2025-04-29T00:04:39.312842Z","iopub.status.idle":"2025-04-29T00:04:39.317582Z","shell.execute_reply.started":"2025-04-29T00:04:39.312815Z","shell.execute_reply":"2025-04-29T00:04:39.316499Z"}},"outputs":[],"execution_count":345},{"cell_type":"code","source":"meta_model_age, models_age = stacked_baseline_unique_data(df_sampled_new, 'age')\nX_test = df_complement_new.drop(['age', 'gender'], axis=1)\ny_test = df_complement_new['age'].map({'twenties': 1, 'fifties': 0})\n\npreds, probas = predict(meta_model_age, models_age, X_test, 0.5)\ntest_acc = accuracy_score(y_test, preds)\nprint(f\"Test Accuracy: {test_acc:.4f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T00:04:39.318968Z","iopub.execute_input":"2025-04-29T00:04:39.319355Z"}},"outputs":[{"name":"stdout","text":"Class distribution:\nage\n1    18623\n0     6975\nName: count, dtype: int64\n\nTuning knn with Class 0 priority...\nBest params for knn: {'weights': 'distance', 'p': 1, 'n_neighbors': 4}\nBest CV accuracy: 0.9113\n\nTuning rf with Class 0 priority...\n","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":"class_names = ['fifties', 'twenties']\ncm = confusion_matrix(y_test, preds)\n\nplt.figure(figsize=(8, 6))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', \n            xticklabels=class_names, \n            yticklabels=class_names)\nplt.title('Confusion Matrix')\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"y_test = (df_complement['gender'] + '_' + df_complement['age']).map({'male_fifties': 3, 'female_fifties': 2, 'male_twenties': 1, 'female_twenties': 0})\n\nX_test = df_complement.drop(['age', 'gender'], axis=1)\npreds_gender, probas = predict(meta_model_gender, models_gender, X_test)\n#X_test['label'] = preds_gender\npreds_age, probas = predict(meta_model_age, models_age, X_test)\ny_pred = []\nfor i in range(len(preds_age)):\n    if preds_age[i] == 0 and preds_gender[i] == 1:\n        y_pred.append(3)\n    elif preds_age[i] == 0 and preds_gender[i] == 0:\n        y_pred.append(2)\n    if preds_age[i] == 1 and preds_gender[i] == 1:\n        y_pred.append(1)\n    if preds_age[i] == 1 and preds_gender[i] == 0:\n        y_pred.append(0)\ntest_acc = accuracy_score(y_test, y_pred)\nprint(f\"Test Accuracy: {test_acc:.4f}\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"class_names = ['female_twenties', 'male_twenties', 'female_fifties', 'male_fifties']\ncm = confusion_matrix(y_test, y_pred)\n\nplt.figure(figsize=(8, 6))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', \n            xticklabels=class_names, \n            yticklabels=class_names)\nplt.title('Confusion Matrix')\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"males_df = df[df['gender'] == 'male']\nfor feature in df.columns:\n    if feature == 'gender': continue\n    plt.figure(figsize=(10, 5))\n    sns.boxplot(data=df, x='age', y=feature)\n    plt.title(f'Boxplot of {feature} by Age Group')\n    plt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def dump_models(meta_age, models_age, meta_gender, models_gender):\n    dump(meta_age, '/kaggle/working/meta_age.joblib')\n    for i, (name, model) in enumerate(models_age.items()):\n        dump(model, f'/kaggle/working/{name}_age.joblib')\n    dump(meta_gender, '/kaggle/working/meta_gender.joblib')\n    for i, (name, model) in enumerate(models_gender.items()):\n        dump(model, f'/kaggle/working/{name}_gender.joblib')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"dump_models(meta_model_age, models_age, meta_model_gender, models_gender)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### all in one","metadata":{}},{"cell_type":"code","source":"X = df.drop(['gender', 'age'], axis=1)\ny = df['gender'].map({'male' : 1, 'female' : 0})","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"gender_feature_imps = baseline(X, y)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"remaining_features_gen = remaining_features.copy()\nremaining_features_gen.remove('gender')\nremaining_features_gen.remove('age')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"gender_imp = pd.DataFrame(\n                {'Feature' : remaining_features_gen,\n                 'importance' : gender_feature_imps}\n                ).sort_values('importance', ascending=False\n                ).reset_index().drop(['index'],axis=1)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.figure(figsize=(16, 6))\nplt.plot(gender_imp['Feature'][:30], gender_imp['importance'][:30], 'bo-')  # 'bo-' means blue circles with lines\nplt.title('Feature vs importance')\nplt.xlabel('Feature')\nplt.ylabel('importance')\n\nplt.xticks(rotation=45, ha='right')\nplt.grid(True)\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X = df.drop(['gender', 'age'], axis=1)\ny = df['age'].map({'twenties' : 1, 'fifties' : 0})\nage_feature_imps = baseline(X, y)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"remaining_features_age = remaining_features.copy()\nremaining_features_age.remove('gender')\nremaining_features_age.remove('age')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"age_imp = pd.DataFrame(\n                {'Feature' : remaining_features_age,\n                 'importance' : age_feature_imps}\n                ).sort_values('importance', ascending=False\n                ).reset_index().drop(['index'],axis=1)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.figure(figsize=(16, 6))\nplt.plot(age_imp['Feature'][:30], age_imp['importance'][:30], 'bo-')  # 'bo-' means blue circles with lines\nplt.title('Feature vs importance')\nplt.xlabel('Feature')\nplt.ylabel('importance')\n\nplt.xticks(rotation=45, ha='right')\nplt.grid(True)\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"top30_age = age_imp.head(30)\ntop30_gender = gender_imp.head(30)\n\ncommon_features = pd.merge(top30_age, top30_gender, on='Feature', how='inner')['Feature'].tolist()\n\nage_only = top30_age[~top30_age['Feature'].isin(top30_gender['Feature'])]\nage_only_features = list(zip(age_only['Feature'], age_only['importance']))\n\ngender_only = top30_gender[~top30_gender['Feature'].isin(top30_age['Feature'])]\ngender_only_features = list(zip(gender_only['Feature'], gender_only['importance']))","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"for i, (feature, score) in enumerate(gender_only_features):\n    print(score)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.to_csv('/kaggle/working/fixed.csv')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"pip install --upgrade scikit-learn imbalanced-learn","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"significant_features = []\nn_features = len(df.columns) - 1  # Exclude 'gender'\nn_cols = 3  # Number of columns in subplot grid\nn_rows = int(np.ceil(n_features / n_cols))\n\nplt.figure(figsize=(15, 5 * n_rows))\nmales_df = df[df['gender'] == 'male']\n\nfor i, feature in enumerate(males_df.columns):\n    if feature in ['gender', 'age']:  # Skip non-numeric or grouping columns\n        continue\n    \n    # Filter data\n    twenties = males_df[males_df['age'] == 'twenties'][feature].dropna()\n    fifties = males_df[males_df['age'] == 'fifties'][feature].dropna()\n    \n    # Skip if one group is empty\n    if len(twenties) == 0 or len(fifties) == 0:\n        continue\n    \n    # T-test and Cohen's d\n    t_stat, p_value = ttest_ind(twenties, fifties, nan_policy='omit')\n    pooled_std = np.sqrt(((len(twenties)-1)*np.std(twenties, ddof=1)**2 + \n                         ((len(fifties)-1)*np.std(fifties, ddof=1)**2) / \n                         (len(twenties) + len(fifties) - 2)))\n    cohens_d = (np.mean(fifties) - np.mean(twenties)) / pooled_std\n    \n    \n    # Plot only if p-value < 0.05\n    if p_value < 0.001 and abs(cohens_d) > 0.0025:\n        print(f'{feature}: p-value = {p_value:.4f}, Cohen\\'s d = {cohens_d:.6f}')\n        significant_features.append(feature)\n        #plt.subplot(n_rows, n_cols, len(significant_features))\n        #sns.boxplot(x='age', y=feature, data=males_df)\n        #plt.title(f'{feature}\\n(p={p_value:.3f}, d={cohens_d:.6f})')\n\nplt.tight_layout()\n#plt.show()\n\nprint(\"Significant features:\", significant_features)","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}