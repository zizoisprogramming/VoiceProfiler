{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.10","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":9812,"sourceType":"datasetVersion","datasetId":5793}],"dockerImageVersionId":30096,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"## **ML-Model to detect gender age based on his/her voice**   \nIn this notebook, I am using a common-voice dataset to train a model for detecting age of \na person based on his/her voice","metadata":{"execution":{"iopub.status.busy":"2021-05-30T18:34:44.533558Z","iopub.execute_input":"2021-05-30T18:34:44.533912Z","iopub.status.idle":"2021-05-30T18:34:44.876803Z","shell.execute_reply.started":"2021-05-30T18:34:44.53388Z","shell.execute_reply":"2021-05-30T18:34:44.875925Z"}}},{"cell_type":"markdown","source":"### **Stepwise ML-model development**  \nThis notebook is created for beginners to develop age detection ml-model with stepwise approach using common-voice dataset.\nThe notebook include following steps:\n* Data Collection\n* Data Pre-processing \n* Feature Engineering\n* Model Selection\n* Model Analysis\n* Model Deployment","metadata":{}},{"cell_type":"markdown","source":"### **Step-01 Data Collection**  \nIn this step the data is loaded and explored. The data is understood with basic graphs and to check if the dataset is balanced.","metadata":{}},{"cell_type":"code","source":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # visualizing data\nimport seaborn as sns # visualizing data with stunning default theme\nimport sklearn # contain algorithms\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# load dataset from input directory\ndf = pd.read_csv(\"../input/common-voice/cv-valid-train.csv\") \ndf[df['age'].notna()].head()","metadata":{"execution":{"iopub.status.busy":"2025-04-18T19:12:27.058572Z","iopub.execute_input":"2025-04-18T19:12:27.059356Z","iopub.status.idle":"2025-04-18T19:12:28.600520Z","shell.execute_reply.started":"2025-04-18T19:12:27.058832Z","shell.execute_reply":"2025-04-18T19:12:28.599670Z"},"trusted":true},"outputs":[{"execution_count":1,"output_type":"execute_result","data":{"text/plain":"                            filename  \\\n5   cv-valid-train/sample-000005.mp3   \n8   cv-valid-train/sample-000008.mp3   \n13  cv-valid-train/sample-000013.mp3   \n14  cv-valid-train/sample-000014.mp3   \n19  cv-valid-train/sample-000019.mp3   \n\n                                                 text  up_votes  down_votes  \\\n5   a shepherd may like to travel but he should ne...         1           0   \n8                       put jackie right on the staff         3           0   \n13  but he had found a guide and didn't want to mi...         1           0   \n14  as they began to decorate the hallway a silhou...         1           0   \n19   then they got ahold of some dough and went goofy         1           0   \n\n          age  gender     accent  duration  \n5    twenties  female         us       NaN  \n8   seventies    male         us       NaN  \n13   thirties  female         us       NaN  \n14    sixties    male    england       NaN  \n19    fifties    male  australia       NaN  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>filename</th>\n      <th>text</th>\n      <th>up_votes</th>\n      <th>down_votes</th>\n      <th>age</th>\n      <th>gender</th>\n      <th>accent</th>\n      <th>duration</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>5</th>\n      <td>cv-valid-train/sample-000005.mp3</td>\n      <td>a shepherd may like to travel but he should ne...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>twenties</td>\n      <td>female</td>\n      <td>us</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>cv-valid-train/sample-000008.mp3</td>\n      <td>put jackie right on the staff</td>\n      <td>3</td>\n      <td>0</td>\n      <td>seventies</td>\n      <td>male</td>\n      <td>us</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>cv-valid-train/sample-000013.mp3</td>\n      <td>but he had found a guide and didn't want to mi...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>thirties</td>\n      <td>female</td>\n      <td>us</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>cv-valid-train/sample-000014.mp3</td>\n      <td>as they began to decorate the hallway a silhou...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>sixties</td>\n      <td>male</td>\n      <td>england</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>cv-valid-train/sample-000019.mp3</td>\n      <td>then they got ahold of some dough and went goofy</td>\n      <td>1</td>\n      <td>0</td>\n      <td>fifties</td>\n      <td>male</td>\n      <td>australia</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":1},{"cell_type":"code","source":"sns.set(rc={'figure.figsize':(15, 5)})\nsns.countplot(x=\"age\", \n        data=df[df['age'].notna()], \n        order=['teens', 'twenties', 'thirties', 'fourties', 'fifties', 'sixties', 'seventies', 'eighties'])\n\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2025-04-18T19:12:28.601679Z","iopub.execute_input":"2025-04-18T19:12:28.601924Z","iopub.status.idle":"2025-04-18T19:12:28.829228Z","shell.execute_reply.started":"2025-04-18T19:12:28.601901Z","shell.execute_reply":"2025-04-18T19:12:28.828394Z"},"trusted":true},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1080x360 with 1 Axes>","image/png":"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TGlpqenfv7/597//bYy5sA90797d/bhFixbuvtq5c6fp1KmTexkX74/GlO/XtLQ0k5aW5m5buHChef75540xxrRr184cP37cGHPhnPH8+fOVtFV829mzZ03fvn3d6378+HHTuXNns3fvXvfx6+TJk+XOz1auXFluO9fm/gjwdoBFxWzbtk27d+/WypUrJUlFRUVq3Lixzp8/rx07digvL88973/+8x9lZ2erY8eOkqSePXtKkm6++WbVr19fx44dU0xMjMrKyjRt2jTFx8czBOwa7r33Xm3fvl3R0dFKSEjQJ598omPHjmn79u0aM2aMpCv30Y8SExPl5+enevXqqVmzZjp8+LBuu+22q77utm3b9M033+jhhx+WJBljdO7cOUlSfHy8li1bpsOHD6tjx4668847PbDm1dsDDzyg4OBgSdLtt9/u3lY/dd999yk8PNxqmdu2bdOePXvUv39/SXJ/0ixJ99xzj+bPn6/u3bvrvvvuYwjsZXzxxRdq1aqVmjdvLkkaMGCAnn32WRUUFFzzue3atdMtt9xi9TrsO77jSsfGevXq6ZZbbtGkSZPUqVMnde3a1b0v4epatWql7OxsPfvss+rQoYO6du16yTxjxozR8OHDtWDBAq1bt04BAdc+Bfz44491+PBh/f73v3dPKysr06lTp3T33XcrNTVVhYWFio+P1z333FOZq1StXG77X+2Y069fPz3yyCOaOHGisrOzde7cOcXFxSk7O1vZ2dl6+umn3csuLS3VgQMH3FehfjyHi42N1YkTJ1RcXOx+X7uSbdu2qaCgQFu2bJEklZSUuK9+3nPPPZoyZYq6deumrl27KiYmpnI3jo/67LPP9P3332v06NHuaQ6HQ2VlZe7HX3zxhW6//Xb3udmAAQM0f/78csuprf1BgKymjDF66aWXLvnHKigokMPh0JtvvqnAwMDLPvfif2x/f385nU7Vq1dPb7/9tj755BNt375dixYt0vr16xUZGenR9aiu7rnnHr3wwgtq0qSJBg4cKIfDob/97W/6+uuv1a5dO0lX7qMfXa4frsUYowEDBmjcuHGXtA0fPlwJCQnavn27Zs+erY4dO2r8+PEVXMOayXab/5zvLBhjNGbMGA0cOPCStqSkJO3bt09ZWVkaN26cRowYoUceeeTnF15L+fv7y+VyuR8XFxeXa/+5/cS+4xuudmz8y1/+ol27dikrK0u//e1v9fLLL7tPrHBlMTExyszMVFZWlj766CMtXrxY06dPLzdPfn6+cnJyFBQUpLNnzyo6Otpq2Z07d9bChQsvmd6jRw/FxsbqH//4h1asWKG1a9dq0aJFlbI+1c3ltv/9999/xWNOdHS0mjdvro8++kg7duxQ//795XA4ZIzRjTfeqA0bNlzxtX58H/P395d0IdBfK7AYY5ScnKx77733krYXX3xRX375pbKysjRs2DDNnDlTXbp0+TmrXy0ZY9SyZUutXr263PTvv//+Zy2ntvYHd2GtRurWrev+VD4hIUHLly93nwDn5eXpyJEjCg0NVfv27bV8+XL383JycnTy5MmrLjsvL0+FhYXq3LmzJkyYoHr16unIkSOeW5lq6OLtHxsbq3379umzzz7TnXfeqV//+tdasWKFfvWrXykoKEjSlfvI5nXy8/Mv25aQkKANGzbo2LFjki5c7dqzZ48k6eDBg7rllls0ePBgDRs2TF9++eV1r3N1d3GfXe9yrtYnr7/+us6ePSvpwieJ33zzjSTpwIEDatmypf7whz+oT58+9MllxMbG6ptvvlF2drakC99TvP322xUaGqpbb71V+/btU0lJiUpKStyf1l4J+45vCA0NVVFRUblP8i92pWNjQUGB8vLy1KFDBz311FNq0aKF9u/fX5WlV1vHjh2Tv7+/HnjgAU2dOlV5eXnuY9KPpk6dqocfflgpKSkaP368+9gYGhp6xf2mY8eO+vjjj8v1w493bD106JAiIyP129/+Vv/93/9dq/eby23/qx1zJKl///7661//qszMTPcIlqZNmyokJERvvfWWe77s7Gyr97Grvd8lJCQoIyPDfdfkgoICZWdnq6ysTEeOHFHbtm312GOPqWPHjvr6668ruhmqlbvuukuHDh1SVlaWe9ru3btlLro1zJ133qm9e/fq8OHDki68P9mq6f3BFchqZOTIkRo2bJhCQkKUnp6u9PR09e3bVw6HQ4GBgUpKSlJMTIwWLVqk+fPnq3fv3pIu/BPPnTv3qlcTc3Jy9Mwzz6isrExOp1P33XefYmNjq2jNqoeLt/+qVat0xx13yN/fX4GBgbrjjjt09uzZckN4kpKSlJqaetk+uppBgwZpwYIFeuWVV9w3afnR3Xffrf/5n//RmDFj5HQ6VVpaqsTERLVp00arVq3SJ598osDAQAUFBV3y6XNtdHGfNWnSpMLLGTZsmJKSkhQSEqLnnnuuXFu/fv105swZ9x0MjTH63e9+p1atWum5557ToUOH5O/vr/r162vu3LnXtT41UXh4uBYuXKgJEyaorKxM4eHhSk1NlXQhXN577736zW9+o0aNGqlVq1ZX/TCMfcc3hIWFqXfv3urdu7caNGhwyQ3ZrnRsDAwM1NixY1VUVCRjjG6//XZ1797dS2tRvezbt899bHK5XHrsscfUqFEjd3tGRoaKi4s1evRoORwOJSYmasaMGXr++efVp08fTZ06VZs3b3bfROdHt912m1JTUzVt2jQVFRWptLRU7dq1U9u2bfXOO+9o48aNCgwMlMPhUFJSUpWvt6+43Pa/2jFHkrp3765Zs2bpjjvucF8NDggIUHp6uubNm6dXXnlFLpdLERER+tOf/nTNGn56jnKxxx57TC+++KJ7xJTD4dCTTz6pmJgYTZkyRfn5+XI4HIqKiqo1P+HSoEEDvfTSS0pNTdW8efNUWlqqmJgYPfPMM+55GjZsqJkzZ2r06NGqU6eOunbtqsDAQNWpU+eay6/p/cFdWAEAAADgJwoKCtzfxV67dq3efPNNvfHGG16uyvu4AgkAAAAAP7Fq1Spt3rxZTqdTDRo00Jw5c7xdkk/gCiQAAAAAwAo30QEAAAAAWCFAAgAAAACsECABAAAAAFYIkAAAAAAAKwRIAAAAAIAVAiQAAAAAwAoBEgAAAABghQAJAEAVWr58uR544AHddddd6tmzp959911JktPp1IIFCxQfH6+EhAS99tpratmypcrKyiRJ+fn5SkpKUqdOndS5c2ctXrxYTqfTm6sCAKiFArxdAAAAtUlMTIxWr16tyMhIbd68WRMnTtTWrVv1/vvv66OPPtKGDRtUp04djRs3rtzzpkyZooiICG3dulWFhYV6/PHHFRUVpcGDB3tpTQAAtRFXIAEAqEIPPfSQGjduLD8/P/Xs2VO33nqrdu/erXfeeUfDhg3TTTfdpAYNGuixxx5zP+fUqVP68MMPlZSUpBtuuEEREREaPny43n77bS+uCQCgNuIKJAAAVeitt97SypUr9cMPP0iSzp8/r9OnT+vEiROKiopyz3fTTTe5/z569KjKysrUqVMn9zSXy1VufgAAqgIBEgCAKvLDDz9o+vTpysjI0F133SV/f3/17dtXkhQZGaljx465573475tuuklBQUHKyspSQABv3QAA72EIKwAAVaSwsFAOh0Ph4eGSpLVr12r//v2SLgxtffXVV3X8+HGdO3dOK1ascD+vUaNG6tixoxYsWKCCggK5XC4dPnxYO3bs8Mp6AABqLwIkAABVpHnz5ho5cqQGDx6sX//61/r222/Vrl07SdIjjzyijh07qk+fPurXr5+6dOmigIAA+fv7S5IWLlyo0tJS9ezZU3fffbeeeuopnTx50purAwCohRzGGOPtIgAAQHkffvihZs6cqb/97W/eLgUAADeuQAIA4AOKior04YcfqqysTMePH1daWpoeeOABb5cFAEA5XIEEAMAHFBYWaujQoTpw4IBCQkLUtWtXTZs2TaGhod4uDQAANwIkAAAAAMAKQ1gBAAAAAFYIkAAAAAAAKwRIAAAAAIAVAiQAAAAAwAoBEgAAAABg5f8BKqzHvH/lNM4AAAAASUVORK5CYII=\n"},"metadata":{}}],"execution_count":2},{"cell_type":"code","source":"sns.countplot(x=\"age\", \n        hue='gender',\n        data=df[df['age'].notna()],\n        order=['teens', 'twenties', 'thirties', 'fourties', 'fifties', 'sixties', 'seventies', 'eighties'])\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2025-04-18T19:12:28.830596Z","iopub.execute_input":"2025-04-18T19:12:28.830842Z","iopub.status.idle":"2025-04-18T19:12:29.140942Z","shell.execute_reply.started":"2025-04-18T19:12:28.830817Z","shell.execute_reply":"2025-04-18T19:12:29.140106Z"},"trusted":true},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1080x360 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"sns.displot(x=\"accent\", \n        data=df[df['accent'].notna()], \n        hue='gender',\n        multiple='stack',\n        height=5, aspect=18/5)\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2025-04-18T19:12:29.142488Z","iopub.execute_input":"2025-04-18T19:12:29.142828Z","iopub.status.idle":"2025-04-18T19:12:29.963963Z","shell.execute_reply.started":"2025-04-18T19:12:29.142794Z","shell.execute_reply":"2025-04-18T19:12:29.963144Z"},"trusted":true},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1373.97x360 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"#del df['duration']\nstart=df.shape\n#df.isna().sum()\nend = df[df['age'].notna()& df['gender'].notna() & df['accent'].notna()].shape\nprint(\"initial: {} final: {}\".format(start, end))\nsns.countplot(x=\"age\", \n        hue='gender',\n        data=df[df['age'].notna()& df['gender'].notna() & df['accent'].notna()],\n        order=['teens', 'twenties', 'thirties', 'fourties', 'fifties', 'sixties', 'seventies', 'eighties'])\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2025-04-18T19:12:29.965357Z","iopub.execute_input":"2025-04-18T19:12:29.965706Z","iopub.status.idle":"2025-04-18T19:12:30.307729Z","shell.execute_reply.started":"2025-04-18T19:12:29.965671Z","shell.execute_reply":"2025-04-18T19:12:30.306996Z"},"trusted":true},"outputs":[{"name":"stdout","text":"initial: (195776, 8) final: (63163, 8)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1080x360 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":5},{"cell_type":"markdown","source":"#### **First-step findings**\nWe understood the dataset and also found that the dataset is imbalance. To refine the dataset for ml-model, we need to perform pre-processing in next-step.","metadata":{}},{"cell_type":"markdown","source":"### Data Pre-processing  \n#### Data Cleaning  \nIn this step we drop entries(samples) with NaN values. The columns that doesn't contribute(unnecessary) to the model are removed. The attributes are checked for its datatypes and changed to an approapriate type.","metadata":{}},{"cell_type":"code","source":"#we extract the columns that we think useful are\ndf = df[['filename','age','gender']]\n#To clean the data we remove the sample with NaN attribute values.\ndata = df[df['age'].notna() & df['gender'].notna()]\ndata.reset_index(inplace=True, drop=True)\ndata.head()","metadata":{"execution":{"iopub.status.busy":"2025-04-18T19:12:30.308749Z","iopub.execute_input":"2025-04-18T19:12:30.308972Z","iopub.status.idle":"2025-04-18T19:12:30.345459Z","shell.execute_reply.started":"2025-04-18T19:12:30.308949Z","shell.execute_reply":"2025-04-18T19:12:30.344694Z"},"trusted":true},"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"                           filename        age  gender\n0  cv-valid-train/sample-000005.mp3   twenties  female\n1  cv-valid-train/sample-000008.mp3  seventies    male\n2  cv-valid-train/sample-000013.mp3   thirties  female\n3  cv-valid-train/sample-000014.mp3    sixties    male\n4  cv-valid-train/sample-000019.mp3    fifties    male","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>filename</th>\n      <th>age</th>\n      <th>gender</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>cv-valid-train/sample-000005.mp3</td>\n      <td>twenties</td>\n      <td>female</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>cv-valid-train/sample-000008.mp3</td>\n      <td>seventies</td>\n      <td>male</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>cv-valid-train/sample-000013.mp3</td>\n      <td>thirties</td>\n      <td>female</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>cv-valid-train/sample-000014.mp3</td>\n      <td>sixties</td>\n      <td>male</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>cv-valid-train/sample-000019.mp3</td>\n      <td>fifties</td>\n      <td>male</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":6},{"cell_type":"code","source":"#data['gender'] = pd.to_numeric(data['gender'],errors = 'coerce')\n#data.dtypes\n#if the below code fail to covert gender datatype and values then uncomment above code\ncleanup_nums = {\"gender\": {\"male\":1,\"female\":0,\"other\":0.5}}\ndata = data.replace(cleanup_nums)\ndata.head()","metadata":{"execution":{"iopub.status.busy":"2025-04-18T19:12:30.346367Z","iopub.execute_input":"2025-04-18T19:12:30.346577Z","iopub.status.idle":"2025-04-18T19:12:30.385570Z","shell.execute_reply.started":"2025-04-18T19:12:30.346557Z","shell.execute_reply":"2025-04-18T19:12:30.384916Z"},"trusted":true},"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"                           filename        age  gender\n0  cv-valid-train/sample-000005.mp3   twenties     0.0\n1  cv-valid-train/sample-000008.mp3  seventies     1.0\n2  cv-valid-train/sample-000013.mp3   thirties     0.0\n3  cv-valid-train/sample-000014.mp3    sixties     1.0\n4  cv-valid-train/sample-000019.mp3    fifties     1.0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>filename</th>\n      <th>age</th>\n      <th>gender</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>cv-valid-train/sample-000005.mp3</td>\n      <td>twenties</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>cv-valid-train/sample-000008.mp3</td>\n      <td>seventies</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>cv-valid-train/sample-000013.mp3</td>\n      <td>thirties</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>cv-valid-train/sample-000014.mp3</td>\n      <td>sixties</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>cv-valid-train/sample-000019.mp3</td>\n      <td>fifties</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":7},{"cell_type":"markdown","source":"### **Feature Engineering**\n#### **Feature Extraction**\n\nWe extract the following features:  \nThe following features are related to audio quality through which the model will learn more effectively. In this project it is not necessary to have good knowledge about the given audio features.\n**Gender**\n* **Spectral Centroid**: each frame of a magnitude spectrogram is normalized and treated as a distribution over frequency bins, from which the mean (centroid) is extracted per frame\n* **Spectral Bandwidth**: compute 2nd-order spectral bandwidth\n* **Spectral Rolloff**: the center frequency for a spectrogram bin such that at least roll_percent (0.85 by default) of the energy of the spectrum in this frame is contained in this bin and the bins below\n* **Mel Frequency Cepstral Coefficients (MFCCs)**: a small set of 20 features that describe the overall shape of a spectral envelope\n\n**Librosa package**  \nLibrosa is a Python package for music and audio analysis. It provides the building blocks necessary to create the music information retrieval systems. Librosa helps to visualize the audio signals and also do the feature extractions in it using different signal processing techniques.","metadata":{}},{"cell_type":"code","source":"import torchaudio\nimport torchaudio.transforms as T\nimport torch\nimport pandas as pd\nfrom tqdm.notebook import tqdm\n\n# Constants\nds_path = \"/kaggle/input/common-voice/cv-valid-train/\"\ndevice = torch.device(\"cuda\")","metadata":{"execution":{"iopub.status.busy":"2025-04-18T19:54:01.362554Z","iopub.execute_input":"2025-04-18T19:54:01.362872Z","iopub.status.idle":"2025-04-18T19:54:01.367246Z","shell.execute_reply.started":"2025-04-18T19:54:01.362844Z","shell.execute_reply":"2025-04-18T19:54:01.366353Z"},"trusted":true},"outputs":[],"execution_count":16},{"cell_type":"code","source":"def feature_extraction_gpu(filename, sampling_rate=48000):\n    path = f\"{ds_path}{filename}\"\n    waveform, sr = torchaudio.load(path)\n    waveform = waveform.to(device)\n\n    # Resample if needed\n    if sr != sampling_rate:\n        resampler = T.Resample(sr, sampling_rate).to(device)\n        waveform = resampler(waveform)\n\n    gender = gender_map[filename]\n\n    # MFCC\n    mfcc_transform = T.MFCC(\n        sample_rate=sampling_rate,\n        n_mfcc=20,\n        melkwargs={\"n_fft\": 2048, \"hop_length\": 512, \"n_mels\": 128}\n    ).to(device)\n    mfcc = mfcc_transform(waveform)  # [1, 20, time]\n    mfcc_mean = mfcc.mean(dim=2).squeeze().tolist()\n\n    # STFT\n    stft = torch.stft(\n        waveform.squeeze(), n_fft=2048, hop_length=512,\n        return_complex=True\n    )\n    magnitude = stft.abs()  # [freq_bins, time]\n    freqs = torch.linspace(0, sampling_rate // 2, magnitude.size(0), device=device).unsqueeze(1)  # [freq_bins, 1]\n\n    # Spectral Centroid\n    sc = (freqs * magnitude).sum(dim=0) / (magnitude.sum(dim=0) + 1e-10)\n    spectral_centroid = sc.mean().item()\n\n    # Spectral Bandwidth (broadcasting fixed)\n    bandwidth = (((freqs - sc.unsqueeze(0)) ** 2) * magnitude).sum(dim=0) / (magnitude.sum(dim=0) + 1e-10)\n    spectral_bandwidth = torch.sqrt(bandwidth).mean().item()\n\n    # Spectral Rolloff\n    power = magnitude ** 2\n    roll_percent = 0.85\n    total_energy = power.sum(dim=0)\n    rolloff_energy = roll_percent * total_energy\n    cumulative_energy = torch.cumsum(power, dim=0)\n    rolloff_bin = (cumulative_energy < rolloff_energy.unsqueeze(0)).sum(dim=0)\n    spectral_rolloff = (rolloff_bin.float() / magnitude.size(0) * (sampling_rate / 2)).mean().item()\n\n    return [gender, spectral_centroid, spectral_bandwidth, spectral_rolloff] + mfcc_mean\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-18T19:54:03.373462Z","iopub.execute_input":"2025-04-18T19:54:03.373821Z","iopub.status.idle":"2025-04-18T19:54:03.382792Z","shell.execute_reply.started":"2025-04-18T19:54:03.373782Z","shell.execute_reply":"2025-04-18T19:54:03.381855Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"# Preload gender map once to avoid DataFrame access bottleneck\ngender_map = dict(zip(data['filename'], data['gender']))\n\ndef create_df_features_gpu(orig, stop_counter=55001, batch_size=256):\n    rows = []\n    subset = orig.iloc[:stop_counter]\n    tot_rows = len(orig) - 1\n\n    for i in tqdm(range(0, len(subset), batch_size)):\n        batch = subset.iloc[i:i+batch_size]\n        for _, row in batch.iterrows():\n            features = feature_extraction_gpu(row['filename'])\n            features.append(row['age'])\n            rows.append(features)\n            print(\"\\r\", end=\"\")\n            print(\"{}/{}\".format(_, tot_rows), end=\"\", flush=True)\n\n    return pd.DataFrame(rows, columns=[\n        \"gender\", \"spectral_centroid\", \"spectral_bandwidth\", \"spectral_rolloff\",\n        \"mfcc1\", \"mfcc2\", \"mfcc3\", \"mfcc4\", \"mfcc5\", \"mfcc6\", \"mfcc7\", \"mfcc8\",\n        \"mfcc9\", \"mfcc10\", \"mfcc11\", \"mfcc12\", \"mfcc13\", \"mfcc14\", \"mfcc15\", \"mfcc16\",\n        \"mfcc17\", \"mfcc18\", \"mfcc19\", \"mfcc20\", \"label\"\n    ])\n\ndf_features = create_df_features_gpu(data)\ndf_features.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-18T19:58:08.108935Z","iopub.execute_input":"2025-04-18T19:58:08.109362Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/215 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"440119a665f34c2e90d1d39f2ab6a84e"}},"metadata":{}},{"name":"stdout","text":"3831/73465","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":"df_features['gender'] = df_features['gender'].map({\n    1 : \"male\",\n    0 : \"female\",\n    0.5 : \"other\"\n})\ndf_features['gen_age'] = df_features['gender'] + df_features['label']\ndf_features.drop(['gender'], axis = 1, inplace= True)\ndf_features.drop(['label'], axis=1, inplace=True)\ndf_features = df_features[~(df_features['gen_age'].str.contains('other'))]\ndf_features.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-18T19:21:38.795842Z","iopub.status.idle":"2025-04-18T19:21:38.796214Z","shell.execute_reply":"2025-04-18T19:21:38.796017Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### **Feature Transformation**  \n\nScaling the features with the scikit-learn StandardScaler.","metadata":{}},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\n\ndef scale_features(data):\n    scaler = StandardScaler()\n    scaled_data = scaler.fit_transform(np.array(data.iloc[:, 0:-1], dtype = float))\n    # with data.iloc[:, 0:-1] we don't consider the label column\n        \n    return scaled_data, scaler\n\nx, scaler = scale_features(df_features)","metadata":{"execution":{"iopub.status.busy":"2025-04-18T19:21:38.797359Z","iopub.status.idle":"2025-04-18T19:21:38.797890Z","shell.execute_reply":"2025-04-18T19:21:38.797625Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(\"Before scaling:\", df_features.iloc[0].values[:-1])\nprint(\"\\nAfter scaling:\", x[0])","metadata":{"execution":{"iopub.status.busy":"2025-04-18T19:21:38.798946Z","iopub.status.idle":"2025-04-18T19:21:38.799478Z","shell.execute_reply":"2025-04-18T19:21:38.799222Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\n\ndef get_labels(data):\n    labels = data.iloc[:, -1]\n    encoder = LabelEncoder()\n    labels = encoder.fit_transform(labels)\n    return labels, encoder\n\ny, encoder = get_labels(df_features)\nclasses = encoder.classes_\nprint(\"Before encoding:\", df_features.iloc[0].values[-1])\nprint(\"\\nAfter encoding:\", y[0])\nprint(\"\\nClasses:\", classes)","metadata":{"execution":{"iopub.status.busy":"2025-04-18T19:21:38.800496Z","iopub.status.idle":"2025-04-18T19:21:38.801003Z","shell.execute_reply":"2025-04-18T19:21:38.800747Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### **Feature Selection**  \n\nWe use the ANOVA (ANalysis Of VAriance) statistical technique (f_classif) to select the best 22 features.\n","metadata":{}},{"cell_type":"code","source":"from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import f_classif\n\nn_features = 22\n\nf_selector = SelectKBest(f_classif, k=n_features).fit(x, y)\nX_new = f_selector.transform(x)\nscores = f_selector.scores_\n\nindices = np.argsort(scores)[::-1]\n\nfeatures = []\nfor i in range(n_features):\n    features.append(df_features.columns[indices[i]])\n    \nplt.figure(figsize=(22, 5))\nplt.bar(features, scores[indices[range(n_features)]], color='g')\nplt.xticks(fontsize=8)\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2025-04-18T19:21:38.802083Z","iopub.status.idle":"2025-04-18T19:21:38.802614Z","shell.execute_reply":"2025-04-18T19:21:38.802366Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### **Model Selection**  \n\nHere, we consider two classifiers:\n\n    Support Vector Machine\n    Random Forest\n\nWe evaluate them with the K-Fold Cross-Validation technique. At each iteration of this outer cross-validation process, we tune the hyper-parameters of the classifiers with another (inner) Cross-Validation process , that will further divide the training set into training and validation data.\n\nAt each iteration of the outer CV process, we print the F1-Score obtained by the tuned classifier on the validation data, but also the F1-Score computed on the test data. Finally, we print the average F1-Scores computed on the test data at each step of the outer CV process.","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier, StackingClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier","metadata":{"execution":{"iopub.status.busy":"2025-04-18T19:21:38.803704Z","iopub.status.idle":"2025-04-18T19:21:38.804242Z","shell.execute_reply":"2025-04-18T19:21:38.803968Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Train Base Classifiers","metadata":{}},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(X_new, y, test_size = 0.2, random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-18T19:21:38.805351Z","iopub.status.idle":"2025-04-18T19:21:38.805895Z","shell.execute_reply":"2025-04-18T19:21:38.805623Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"knn_model = KNeighborsClassifier()\nknn_grid = {\n    'n_neighbors': list(range(1, 27)),\n    'metric': ['euclidean', 'manhattan', 'minkowski']\n}\nknn_cv = GridSearchCV(knn_model, \n            param_grid = knn_grid,\n            cv = 5,\n            n_jobs=-1\n)\n\nknn_cv.fit(X_train, y_train)\nbest_knn = knn_cv.best_estimator_","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-18T19:21:38.806928Z","iopub.status.idle":"2025-04-18T19:21:38.807452Z","shell.execute_reply":"2025-04-18T19:21:38.807199Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(\"Best parameters found: \", knn_cv.best_params_)\nprint(\"Best cross-validation score: \", knn_cv.best_score_)\n\ntest_score = best_knn.score(X_test, y_test)\nprint(\"Test set accuracy: \", test_score)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-18T19:21:38.808419Z","iopub.status.idle":"2025-04-18T19:21:38.808747Z","shell.execute_reply":"2025-04-18T19:21:38.808591Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"svc_model = SVC(probability=True)\nsvc_grid = {\n    'C': [1, 10, 100, 1000],\n    'gamma': [0.1, 0.01, 0.001, 0.0001],\n    'kernel': ['linear', 'rbf', 'poly']\n}\nsvc_cv = GridSearchCV(svc_model, \n            param_grid = svc_grid,\n            cv = 5,\n            n_jobs=-1\n)\n\nsvc_cv.fit(X_train, y_train)\nbest_svc = svc_cv.best_estimator_","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-18T19:21:38.809519Z","iopub.status.idle":"2025-04-18T19:21:38.809860Z","shell.execute_reply":"2025-04-18T19:21:38.809686Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(\"Best parameters found: \", svc_cv.best_params_)\nprint(\"Best cross-validation score: \", svc_cv.best_score_)\n\ntest_score = best_svc.score(X_test, y_test)\nprint(\"Test set accuracy: \", test_score)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-18T19:21:38.810778Z","iopub.status.idle":"2025-04-18T19:21:38.811132Z","shell.execute_reply":"2025-04-18T19:21:38.810956Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"rf_model = RandomForestClassifier()\nrf_grid = {\n    'max_features': ['sqrt', 'log2'],\n    'n_estimators': [100, 300, 500, 700]\n}\nrf_cv = GridSearchCV(rf_model, \n            param_grid = rf_grid,\n            cv = 5,\n            n_jobs=-1\n)\n\nrf_cv.fit(X_train, y_train)\nbest_rf = rf_cv.best_estimator_","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-18T19:21:38.812001Z","iopub.status.idle":"2025-04-18T19:21:38.812360Z","shell.execute_reply":"2025-04-18T19:21:38.812201Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(\"Best parameters found: \", rf_cv.best_params_)\nprint(\"Best cross-validation score: \", rf_cv.best_score_)\n\ntest_score = best_rf.score(X_test, y_test)\nprint(\"Test set accuracy: \", test_score)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-18T19:21:38.813081Z","iopub.status.idle":"2025-04-18T19:21:38.813415Z","shell.execute_reply":"2025-04-18T19:21:38.813272Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"lr_model = LogisticRegression()\nlr_grid = {\n    'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000],\n    'penalty': ['l1', 'l2'],\n    'solver': ['lbfgs', 'liblinear', 'newton-cg']\n}\nlr_cv = GridSearchCV(lr_model, \n            param_grid = lr_grid,\n            cv = 5,\n            n_jobs=-1\n)\n\nlr_cv.fit(X_train, y_train)\nbest_lr = lr_cv.best_estimator_","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-18T19:21:38.814032Z","iopub.status.idle":"2025-04-18T19:21:38.814369Z","shell.execute_reply":"2025-04-18T19:21:38.814227Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(\"Best parameters found: \", lr_cv.best_params_)\nprint(\"Best cross-validation score: \", lr_cv.best_score_)\n\ntest_score = best_lr.score(X_test, y_test)\nprint(\"Test set accuracy: \", test_score)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-18T19:21:38.815003Z","iopub.status.idle":"2025-04-18T19:21:38.815366Z","shell.execute_reply":"2025-04-18T19:21:38.815205Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"et_model = ExtraTreesClassifier()\net_grid = {\n    'max_features': [3, 5, 7, 9, 11],\n    'n_estimators': list(range(100, 1100, 100))\n}\net_cv = GridSearchCV(et_model, \n            param_grid = et_grid,\n            cv = 5,\n            n_jobs=-1\n)\n\net_cv.fit(X_train, y_train)\nbest_et = et_cv.best_estimator_","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-18T19:21:38.816213Z","iopub.status.idle":"2025-04-18T19:21:38.816536Z","shell.execute_reply":"2025-04-18T19:21:38.816387Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(\"Best parameters found: \", et_cv.best_params_)\nprint(\"Best cross-validation score: \", et_cv.best_score_)\n\ntest_score = best_et.score(X_test, y_test)\nprint(\"Test set accuracy: \", test_score)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-18T19:21:38.817279Z","iopub.status.idle":"2025-04-18T19:21:38.817600Z","shell.execute_reply":"2025-04-18T19:21:38.817446Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"base_estimators = [\n    ('knn', best_knn),\n    ('logreg', best_lr),\n    ('rf', best_rf),\n    ('et', best_et),\n    ('svc', best_svc)  \n]\n\nmeta_classifier = LogisticRegression(max_iter=1000)\n\nstacking_clf = StackingClassifier(\n    estimators=base_estimators,\n    final_estimator=meta_classifier,\n    cv=5, \n    stack_method='auto',  \n    n_jobs=-1  \n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-18T19:21:38.818334Z","iopub.status.idle":"2025-04-18T19:21:38.818631Z","shell.execute_reply":"2025-04-18T19:21:38.818493Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"test_score = stacking_clf.score(X_test, y_test)\nprint(\"Test set accuracy: \", test_score)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-18T19:21:38.819410Z","iopub.status.idle":"2025-04-18T19:21:38.819744Z","shell.execute_reply":"2025-04-18T19:21:38.819578Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}